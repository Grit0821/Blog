<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Grit&#39;s World</title>
  
  
  <link href="https://grit0821.github.io/Blog/atom.xml" rel="self"/>
  
  <link href="https://grit0821.github.io/Blog/"/>
  <updated>2020-10-29T08:14:24.807Z</updated>
  <id>https://grit0821.github.io/Blog/</id>
  
  <author>
    <name>GRIT</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react setState更新机制</title>
    <link href="https://grit0821.github.io/Blog/2020/10/29/react-setState%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/"/>
    <id>https://grit0821.github.io/Blog/2020/10/29/react-setState%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/</id>
    <published>2020-10-29T08:13:40.000Z</published>
    <updated>2020-10-29T08:14:24.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="setState-更新机制"><a href="#setState-更新机制" class="headerlink" title="setState 更新机制"></a>setState 更新机制</h1><h2 id="1-setState-传参方式"><a href="#1-setState-传参方式" class="headerlink" title="1.setState 传参方式"></a>1.setState 传参方式</h2><p><code>setState(obj||func,func)</code>，<code>setState</code>可以接受俩个参数，第一参数是代表新state的对象或者返回新state对象的函数，第二个参数是更新state后的回调函数</p><h3 id="1-对象"><a href="#1-对象" class="headerlink" title="1.对象"></a>1.对象</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handel = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">num</span>: <span class="keyword">this</span>.state.num - <span class="number">10</span>&#125;)</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">num</span>: <span class="keyword">this</span>.state.num + <span class="number">1</span>&#125;) <span class="comment">// 只执行此句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在组件的方法中多次以传参对象的方式调用<code>setState</code>会导致覆盖合并，只执行最后一个<code>setState</code>，这是由react本身的性能机制决定：</p><p><code>setState</code>并不是同步的，react会将多个<code>setState</code>合为一个进行更新，减少<code>render()</code>的调用，提高性能</p><p>然而在平常方法中，我们一般只调用一次<code>setState</code></p><h3 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h3><p><code>setState</code>如果第一个参数传函数可以在函数中拿到新state的值，</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chang = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function">(<span class="params">preState</span>) =&gt;</span> &#123; <span class="comment">// state旧值</span></span><br><span class="line">    <span class="keyword">const</span> newNum = preState.num + <span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(newNum)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">num</span>: newNum&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>多次<code>setState</code>会合并为一次，进行render更新</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">change = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">    num: state.num + <span class="number">1</span></span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"num"</span>, <span class="keyword">this</span>.state.num);</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">    num: state.num - <span class="number">1</span></span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h2 id="2-setState-更新方式"><a href="#2-setState-更新方式" class="headerlink" title="2. setState 更新方式"></a>2. setState 更新方式</h2><h3 id="1-异步"><a href="#1-异步" class="headerlink" title="1. 异步"></a>1. 异步</h3><p>React  提供的事件（比如 onClick）调用<code>setState</code>是异步更新的，这是有react 本身的性能机制决定的，</p><p>但我们可以通过<code>setState</code>的回调拿到更新后的state</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">handel &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F; 对象参数</span><br><span class="line">this.setState(&#123; num: this.state.num - 10 &#125;);</span><br><span class="line">console.log(&quot;num1&quot;, this.state.num);</span><br><span class="line">this.setState(&#123; num: this.state.num + 1 &#125;,()&#x3D;&gt;&#123;</span><br><span class="line">console.log(this.state.num)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h3 id="2-同步"><a href="#2-同步" class="headerlink" title="2.同步"></a>2.同步</h3><p>绕过React通过addEventListener直接添加的事件处理函数，还有通过setTimeout/setInterval产生的异步调用，在这些情况下，<code>setState</code>是同步更新并render页面的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">update = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 同步调用</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">num</span>: <span class="keyword">this</span>.state.num + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"num0"</span>, <span class="keyword">this</span>.state.num);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">num</span>: <span class="keyword">this</span>.state.num + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"num1"</span>, <span class="keyword">this</span>.state.num);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><hr><p><a href="https://codesandbox.io/s/setstate-xiangjie-7og05" target="_blank" rel="noopener">代码链接</a></p><p>参考文章：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/26069727" target="_blank" rel="noopener">setState何时同步更新状态</a></li><li><a href="https://zhuanlan.zhihu.com/p/158725289" target="_blank" rel="noopener">react的setState到底是同步还是异步</a></li><li><a href="http://www.fooao.com/news/react/21.html" target="_blank" rel="noopener">react之setState运行机制</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;setState-更新机制&quot;&gt;&lt;a href=&quot;#setState-更新机制&quot; class=&quot;headerlink&quot; title=&quot;setState 更新机制&quot;&gt;&lt;/a&gt;setState 更新机制&lt;/h1&gt;&lt;h2 id=&quot;1-setState-传参方式&quot;&gt;&lt;a h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>name</title>
    <link href="https://grit0821.github.io/Blog/2020/10/19/name/"/>
    <id>https://grit0821.github.io/Blog/2020/10/19/name/</id>
    <published>2020-10-19T02:14:12.000Z</published>
    <updated>2020-10-19T02:14:12.177Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>mvvm原理</title>
    <link href="https://grit0821.github.io/Blog/2020/02/17/mvvm%E5%8E%9F%E7%90%86/"/>
    <id>https://grit0821.github.io/Blog/2020/02/17/mvvm%E5%8E%9F%E7%90%86/</id>
    <published>2020-02-17T07:08:56.000Z</published>
    <updated>2020-02-17T07:25:42.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">vue 是常见的 mvvm 框架，实现数据，视图双向绑定的原理主要是数据劫持结合发布-订阅模式，通过 Object.defineProperty 来劫持 data 各个的属性，属性初始化取值时添加订阅，属性取值变化时触发 setter 通知订阅触发回调更新视图<p>下面根据 vue 的源码，实现简易版本的 mvvm，使用方式和 vue 一样，主要实现 v-model 命令和文本插值，使用方式如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"school.name"</span>&gt;</span></span><br><span class="line">    &#123;&#123;school.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;school.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;school.age&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"mvvm.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el:<span class="string">'#app'</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line">        school:&#123;</span><br><span class="line"><span class="actionscript">          name:<span class="string">'大连理工'</span>,</span></span><br><span class="line">          age: 70</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h1 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h1><a href="https://upload-images.jianshu.io/upload_images/12955144-8b6fadb33056e624.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="mvvm.png" class="fancybox"><img alt="mvvm.png" style="zoom:80%;" data-src="https://upload-images.jianshu.io/upload_images/12955144-8b6fadb33056e624.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload" title="mvvm.png"></a><p>整体思路如上图所示：</p><p>新建 mvvm 实例 是整个程序的入口，在新建过程中</p><p>首先用 Observer 劫持 data 所有属性：</p><ol><li>创建 Dep 实例 dep，Dep是用来收集订阅和通知订阅更新</li><li>创建 getter，若 Dep.target 存在，dep 添加订阅 watcher</li><li>创建 setter，如果触发 setter，通过 dep 通知 watcher 更新</li></ol><p>然后创建 Compiler 结合 data 进行模板编译：</p><ol><li><p>解析到编译的数据，每个数据创建watcher，在创建过程中：</p><p> Dep.target 指向创建的watcher，</p><p> 取值时触发 getter，给 dep 添加订阅 </p><p> Dep.target  = null 解除引用</p></li><li><p>根据 data 编译模板渲染到页面，初始化视图</p></li></ol><p>完成之后，数据变化 —— 触发 setter，setter 里调用 dep.notify() —— dep 通知所有订阅的 watcher 更新 —— 更新视图</p><h1 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h1><p><a href="https://github.com/Grit0821/mvvm" target="_blank" rel="noopener">github</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
vue 是常见的 mvvm 框架，实现数据，视图双向绑定的原理主要是数据劫持结合发布-订阅模式，通过 Object.defineProperty 来劫持 data 各个的属性，属性初始化取值</summary>
      
    
    
    
    
    <category term="vue" scheme="https://grit0821.github.io/Blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>手写loader(5) less-loadr,css-loader和style-loader</title>
    <link href="https://grit0821.github.io/Blog/2020/02/08/%E6%89%8B%E5%86%99loader-5-less-loadr-css-loader%E5%92%8Cstyle-loader/"/>
    <id>https://grit0821.github.io/Blog/2020/02/08/%E6%89%8B%E5%86%99loader-5-less-loadr-css-loader%E5%92%8Cstyle-loader/</id>
    <published>2020-02-08T12:41:07.000Z</published>
    <updated>2020-02-08T12:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>新建 index.less 文件，并在 index.js 中引入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">less</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@color:</span> blue;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">backgound</span>: url(<span class="string">'./public.jpg'</span>); <span class="comment">// 覆盖</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>配置 webpack loader</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.less$/</span>,</span><br><span class="line">        use:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h1 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h1><p>less-loader 用 less 编译 index.less，返回编译的 css 文件</p><p>首先安装 less <code>yarn add less</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// less.loader.js</span></span><br><span class="line"><span class="keyword">let</span> less = <span class="built_in">require</span>(<span class="string">'less'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> css</span><br><span class="line">  less.render(source,(err, result)=&gt;&#123; <span class="comment">// less转义器提供的写法</span></span><br><span class="line">    css = result.css</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> css</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div><h1 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h1><p>css-loader 对引入的其他模块进行解析</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// css.loader.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/url\((.+?)\)/g</span></span><br><span class="line">  <span class="keyword">let</span> pos = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> current</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">'let list = []'</span>]</span><br><span class="line">  <span class="keyword">while</span> (current = reg.exec(source)) &#123;</span><br><span class="line">    <span class="keyword">let</span> [matchUrl,g] = current <span class="comment">// url('./public.jpg'), './public.jpg'</span></span><br><span class="line">    <span class="comment">// console.log(matchUrl,g)</span></span><br><span class="line">    <span class="keyword">let</span> last = reg.lastIndex - matchUrl.length</span><br><span class="line">    arr.push(<span class="string">`list.push(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source.slice(pos, last))&#125;</span>)`</span>)</span><br><span class="line">    pos = reg.lastIndex</span><br><span class="line">    arr.push(<span class="string">`list.push('url('+require(<span class="subst">$&#123;g&#125;</span>)+')')`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  arr.push(<span class="string">`list.push(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source.slice(pos))&#125;</span>)`</span>)</span><br><span class="line">  arr.push(<span class="string">`module.exports = list.join('')`</span>)</span><br><span class="line">  <span class="comment">// console.log(arr.join('\r\n'))</span></span><br><span class="line">  <span class="keyword">return</span> arr.join(<span class="string">'\r\n'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div><p>css-loader 将 index.less 文件拆成了一个字符串，并且将 ur l这种引入方式做了些修改，变成 require 引入</p><h1 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 导出脚本</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">    let style = document.createElement('style')</span></span><br><span class="line"><span class="string">    style.innerHTML = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source)&#125;</span></span></span><br><span class="line"><span class="string">    document.head.appendChild(style)</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loader.pitch = <span class="function"><span class="keyword">function</span>(<span class="params">remainingRequest</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str =<span class="string">`</span></span><br><span class="line"><span class="string">    let style = document.createElement('style')</span></span><br><span class="line"><span class="string">    style.innerHTML = require(<span class="subst">$&#123;loaderUtils.stringifyRequest(<span class="keyword">this</span>,</span></span></span><br><span class="line"><span class="string"><span class="subst">      <span class="string">'!!'</span>+remainingRequest)&#125;</span>)</span></span><br><span class="line"><span class="string">    document.head.appendChild(style)</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div><p>style-loader 使用了 inline-loader 并设置了前缀 “!!”表示只使用 inline-loader，</p><p>remainingRequest 表示剩余的 loader 请求，此处就是 <code>D:\document\loader-webpack\loaders\css-loader.js!D:\document\loader-webpack\loaders\less-loader.js!D:\document\loader-webpack\src\index.less</code>是一个 inline-loader</p><p><code>loaderUtils.stringifyRequest(this, &#39;!!&#39;+remainingRequest)</code>将绝对路径转化为相对路径，即<code>&quot;!!../loaders/css-loader.js!../loaders/less-loader.js!./index.less&quot;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;新建 index.less 文件，并在 index.js 中引入&lt;/p&gt;
&lt;div class=&quot;code-area-wrap&quot;&gt;&lt;div class=&quot;highlight-tool</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="手写loader" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%89%8B%E5%86%99loader/"/>
    
    
  </entry>
  
  <entry>
    <title>手写loader(1) loader配置</title>
    <link href="https://grit0821.github.io/Blog/2020/02/06/%E6%89%8B%E5%86%99loader-1-loader%E9%85%8D%E7%BD%AE/"/>
    <id>https://grit0821.github.io/Blog/2020/02/06/%E6%89%8B%E5%86%99loader-1-loader%E9%85%8D%E7%BD%AE/</id>
    <published>2020-02-06T14:50:24.000Z</published>
    <updated>2020-02-08T11:32:08.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">-<h1 id="什么是-loader"><a href="#什么是-loader" class="headerlink" title="什么是 loader"></a>什么是 loader</h1><p>webpack 只能处理 js 模块，如果要处理其他类型的文件，需要使用 loader 进行转换；loader 指用来将一段代码转换成另一段代码的 webpack 加载器，loader 只是一个导出为函数的 JavaScript 模块</p><h1 id="写一个简单的-loader"><a href="#写一个简单的-loader" class="headerlink" title="写一个简单的 loader"></a>写一个简单的 loader</h1><p>loader 就是一个函数，接收源码返回处理后的代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// loaders/loader1.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> source</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div><h1 id="loader-的载入方式"><a href="#loader-的载入方式" class="headerlink" title="loader 的载入方式"></a>loader 的载入方式</h1><h2 id="直接写成绝对路径"><a href="#直接写成绝对路径" class="headerlink" title="直接写成绝对路径"></a>直接写成绝对路径</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      use: path.resolve(<span class="string">'loaders'</span>,<span class="string">'loader1'</span>)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="配置-resolveLoader-的-alias-别名"><a href="#配置-resolveLoader-的-alias-别名" class="headerlink" title="配置 resolveLoader 的 alias (别名)"></a>配置 resolveLoader 的 alias (别名)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader:&#123;</span><br><span class="line">    alias:&#123;</span><br><span class="line">      loader1: path.resolve(<span class="string">'loaders'</span>,<span class="string">'loader1'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      use: <span class="string">'loader1'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="配置-resolveLoader-的-modules"><a href="#配置-resolveLoader-的-modules" class="headerlink" title="配置 resolveLoader 的 modules"></a>配置 resolveLoader 的 modules</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader:&#123;</span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      use: <span class="string">'loader1'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>modules: [&#39;node_modules&#39;, path.resolve(&#39;loaders&#39;)]</code>表示先去 node_modules 目录寻找，然后再去根目录下的 loaders 目录寻找</p><h1 id="配置多个loader"><a href="#配置多个loader" class="headerlink" title="配置多个loader"></a>配置多个loader</h1><p><code>use:[loader1, loader2, loader3]</code>，loader 执行顺序倒叙：3 - 2 - 1</p><h1 id="loader-的分类"><a href="#loader-的分类" class="headerlink" title="loader 的分类"></a>loader 的分类</h1><p>pre 在前面，normal 在中间，post 在后面；通过<code>enforce: &#39;pre&#39;</code>设置，还有一种特殊的 inline-loader</p><p>确定分类的 loader 顺序： pre - normal - inline - post，</p><h2 id="inline-loader"><a href="#inline-loader" class="headerlink" title="inline-loader"></a>inline-loader</h2><p>inline-loader 是一类特殊的 loader，不通过 webpack.config.js 设置，在引入模块的时候指明使用，inline-loader 多出现于 loader 内部，比如 style-loader 会在自身代码里引入 css-loader</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js use['loader3','loader2','loader1']</span></span><br><span class="line"><span class="keyword">let</span> str <span class="built_in">require</span>(<span class="string">'inline-loader!a.js'</span>) <span class="comment">// 引入a.js时使用inline-loader</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行顺序</span></span><br><span class="line"><span class="comment">// loader1, loader2, loader3, loader1, loader2, inline-loader, loader3</span></span><br><span class="line"><span class="comment">// 前三个是处理index.js，后面四个是处理引入a.js</span></span><br></pre></td></tr></table></figure></div><p>但是当某个文件想特殊处理，比如上边的 a.js，不想让它用 webpack 配置的 pre 和 normal loader，而只使用 inline-loader，可以设置前缀进行配置</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// “-!”,不会让文件再去通过pre+normal loader来处理了</span></span><br><span class="line"><span class="comment">// “!”, 不使用normal-loader</span></span><br><span class="line"><span class="comment">// “!!”，什么都不要，只使用这个inline loader</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="built_in">require</span>(<span class="string">"!!inline-loader!./a.js"</span>);</span><br></pre></td></tr></table></figure></div><h1 id="loader的组成"><a href="#loader的组成" class="headerlink" title="loader的组成"></a>loader的组成</h1><p>每个 loader 都由两部分组成：pitchLoader 和 normalLoader（都是 loader 上挂的方法）；pitch 和 normal 的执行顺序相反，当 pitch 没有定义或者没有返回值时，会依次执行 pitch 再获取资源，执行 loader；如果定义的某个 pitch 有返回值则会跳过读取资源和自己的 loader</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> source</span><br><span class="line">&#125;</span><br><span class="line">loader.pitch = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">loader.normal = funciton()&#123;&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div><p>pitchLoader 无返回值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">use:['loader3','loader2','loader1']</span><br><span class="line">pitch 无返回值</span><br><span class="line"></span><br><span class="line">pitch:   loader3 -&gt; loader2 -&gt; loader1 </span><br><span class="line"><span class="code">                                        \</span></span><br><span class="line"><span class="code">                                         resource</span></span><br><span class="line"><span class="code">                                        /</span></span><br><span class="line">normal:  loader3 <span class="xml"><span class="tag">&lt;<span class="name">-</span> <span class="attr">loader2</span> &lt;<span class="attr">-</span> <span class="attr">loader1</span></span></span></span><br></pre></td></tr></table></figure></div><p>pitchLoader 有返回值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">use:['loader3','loader2','loader1']</span><br><span class="line">pitch 有返回值</span><br><span class="line"></span><br><span class="line">pitch:   loader3 -&gt; loader2    loader1 </span><br><span class="line"><span class="code">                  /               </span></span><br><span class="line"><span class="code">              有返回值                  resource</span></span><br><span class="line"><span class="code">                /                       </span></span><br><span class="line">normal:  loader3    loader2     loader1</span><br></pre></td></tr></table></figure></div><h1 id="loader-的特点"><a href="#loader-的特点" class="headerlink" title="loader 的特点"></a>loader 的特点</h1><ol><li>第一个 loader（执行顺序的最后一个）要返回 js</li><li>每个 loader 只做一件内容，为了使 loader 在更多场景下链式调用</li><li>每个 loader 都是一个模块</li><li>每个 loader 都是无状态的，确保 loader 在不同模块转换之间不保存状态</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5da59058f265da5b8072ea22#heading-0" target="_blank" rel="noopener">webpack loader</a></p><p><a href="https://www.jianshu.com/p/c7ba57161c6c" target="_blank" rel="noopener">什么是loader</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
-

&lt;h1 id=&quot;什么是-loader&quot;&gt;&lt;a href=&quot;#什么是-loader&quot; class=&quot;headerlink&quot; title=&quot;什么是 loader&quot;&gt;&lt;/a&gt;什么是 load</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="手写loader" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%89%8B%E5%86%99loader/"/>
    
    
  </entry>
  
  <entry>
    <title>手写loader(2) babel-loader实现</title>
    <link href="https://grit0821.github.io/Blog/2020/02/06/%E6%89%8B%E5%86%99loader-2-babel-loader%E5%AE%9E%E7%8E%B0/"/>
    <id>https://grit0821.github.io/Blog/2020/02/06/%E6%89%8B%E5%86%99loader-2-babel-loader%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-02-06T14:50:17.000Z</published>
    <updated>2020-02-06T14:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>babel-loader 用来加载 js 代码并进行转译</p><h1 id="配置-babel-loader"><a href="#配置-babel-loader" class="headerlink" title="配置 babel-loader"></a>配置 babel-loader</h1><p>首先安装 babel 和 babel 的相关模块</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add @babel/core @babel/p<span class="built_in">reset-env</span> <span class="literal">-D</span></span><br></pre></td></tr></table></figure></div><p>@babel/core 是 babel 的核心模块，编译器，用来转译代码</p><p>@babel/preset-env 是 babel 转译代码的预设规则</p><p>然后设置加载 babel-loader 的方式 </p><p>在文件根目录下新建一个文件夹 loaders 用来存放 babel-loader.js</p><p>设置加载 loader 的方式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">    modules:[<span class="string">'node_modules'</span>,path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'source-map'</span>, <span class="comment">// 开启源码映射</span></span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options:&#123;</span><br><span class="line">            presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>设置在使用 loader 的时候先去 node_modules 目录下查找，然后再去 loaders 目录查找</p><h1 id="实现-babel-loader"><a href="#实现-babel-loader" class="headerlink" title="实现 babel-loader"></a>实现 babel-loader</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// babel-loader.js</span></span><br><span class="line"><span class="keyword">let</span> babel = <span class="built_in">require</span>(<span class="string">'@babel/core'</span>)</span><br><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>) <span class="comment">// loader的工具库</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123; <span class="comment">// this表示loader上下文; source表示源码</span></span><br><span class="line">  <span class="keyword">let</span> options = loaderUtils.getOptions(<span class="keyword">this</span>) <span class="comment">//获取loader的options</span></span><br><span class="line">  <span class="keyword">let</span> cb = <span class="keyword">this</span>.async()</span><br><span class="line">  babel.transform(source, &#123; <span class="comment">// 用babel转译源码</span></span><br><span class="line">    ...options , <span class="comment">// 展开对象</span></span><br><span class="line">    sourceMap: <span class="literal">true</span>, <span class="comment">// 源码映射，webpack同时配置devtool属性</span></span><br><span class="line">    <span class="comment">// 设置源码映射的文件名index.js</span></span><br><span class="line">    filename: <span class="keyword">this</span>.resourcePath.split(<span class="string">'/'</span>).pop() </span><br><span class="line">    <span class="comment">// this.resourcePath表示源码的绝对路径</span></span><br><span class="line">    <span class="comment">// "D:\document\loader-webpack\src\index.js"</span></span><br><span class="line">  &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span>&#123;<span class="comment">// 异步回调导出转译结果</span></span><br><span class="line">    cb(err, result.code, result.map)  </span><br><span class="line">  &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div><p><code>let cb = this.async()</code> 是 loader 的原生导出函数，如果是同步，那么loader中会自动调用这个函数，异步的话，需要自己手动调用</p><p>打包后的结果：实现了源码映射</p><a href="https://upload-images.jianshu.io/upload_images/12955144-aedfd99f29118ac0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="undefined" class="fancybox"><img height="80%" width="80%" data-src="https://upload-images.jianshu.io/upload_images/12955144-aedfd99f29118ac0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></a>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;babel-loader 用来加载 js 代码并进行转译&lt;/p&gt;
&lt;h1 id=&quot;配置-babel-loader&quot;&gt;&lt;a href=&quot;#配置-babel-loader&quot; class=</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="手写loader" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%89%8B%E5%86%99loader/"/>
    
    
  </entry>
  
  <entry>
    <title>手写 loader(3) bannder-loader添加时间戳</title>
    <link href="https://grit0821.github.io/Blog/2020/02/06/%E6%89%8B%E5%86%99-loader-3-bannder-loader%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <id>https://grit0821.github.io/Blog/2020/02/06/%E6%89%8B%E5%86%99-loader-3-bannder-loader%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4%E6%88%B3/</id>
    <published>2020-02-06T14:50:05.000Z</published>
    <updated>2020-02-06T14:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>banner-loader 可以在打包的代码前添加相关的注释信息</p><h1 id="配置-banner-loader"><a href="#配置-banner-loader" class="headerlink" title="配置 banner-loader"></a>配置 banner-loader</h1><p>利用 banner-loader 在打包的代码前添加时间戳</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'source-map'</span>,</span><br><span class="line">  watch: <span class="literal">true</span>, <span class="comment">// 开启实时监控打包</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'banner-loader'</span>,</span><br><span class="line">          options:&#123;</span><br><span class="line">            text: <span class="string">'2020/02/'</span>,</span><br><span class="line">            filename: path.resolve(__dirname,<span class="string">'banner.js'</span>) </span><br><span class="line">            <span class="comment">// 优先解析filename表示的banner.js文件，没有再使用text字段</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// banner.js</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().toString()</span><br></pre></td></tr></table></figure></div><h1 id="实现-banner-loader"><a href="#实现-banner-loader" class="headerlink" title="实现 banner-loader"></a>实现 banner-loader</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// banner-loader.js</span></span><br><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="keyword">let</span> validateOptions = <span class="built_in">require</span>(<span class="string">'schema-utils'</span>)</span><br><span class="line"><span class="comment">// schema-utils用来检验使用loader时，传递的options格式是否正确</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = loaderUtils.getOptions(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">let</span> cb = <span class="keyword">this</span>.async()</span><br><span class="line">  <span class="keyword">let</span> schema = &#123; <span class="comment">// 检验规则</span></span><br><span class="line">    type: <span class="string">'object'</span>,</span><br><span class="line">    properties:&#123;</span><br><span class="line">      text: &#123;<span class="attr">type</span>: <span class="string">'string'</span>&#125;,</span><br><span class="line">      filename: &#123;<span class="attr">type</span>: <span class="string">'string'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  validateOptions(schema, options, <span class="string">'banner-loader'</span>)</span><br><span class="line">  <span class="comment">// 用schema规则检验loader的optioins，如果报错，提示'banner-loader'</span></span><br><span class="line">  <span class="keyword">if</span>(options.filename)&#123; <span class="comment">// 优先解析banner.js</span></span><br><span class="line">    <span class="keyword">this</span>.addDependency(options.filename) </span><br><span class="line">    <span class="comment">// 给banner-loader添加依赖，webpack同时设置watch:true</span></span><br><span class="line">    <span class="comment">// 监控banner.js更新就会重新打包</span></span><br><span class="line">    fs.readFile(options.filename,<span class="string">'utf8'</span>,(err, data)=&gt;&#123;</span><br><span class="line">      cb(err,<span class="string">`/*<span class="subst">$&#123;<span class="built_in">eval</span>(data)&#125;</span>*/<span class="subst">$&#123;source&#125;</span>`</span>)</span><br><span class="line">      <span class="comment">// 模板字符串，eval执行banner.js</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="string">`/*<span class="subst">$&#123;options.text&#125;</span>*/<span class="subst">$&#123;source&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;banner-loader 可以在打包的代码前添加相关的注释信息&lt;/p&gt;
&lt;h1 id=&quot;配置-banner-loader&quot;&gt;&lt;a href=&quot;#配置-banner-loader&quot; </summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="手写loader" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%89%8B%E5%86%99loader/"/>
    
    
  </entry>
  
  <entry>
    <title>手写loader(4) file-loader和url-loader</title>
    <link href="https://grit0821.github.io/Blog/2020/02/06/%E6%89%8B%E5%86%99loader-4-file-loader%E5%92%8Curl-loader/"/>
    <id>https://grit0821.github.io/Blog/2020/02/06/%E6%89%8B%E5%86%99loader-4-file-loader%E5%92%8Curl-loader/</id>
    <published>2020-02-06T14:49:51.000Z</published>
    <updated>2020-02-06T14:53:08.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h1><p>file-loader 主要用来加载图片文件</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> p <span class="keyword">from</span> <span class="string">'./public.jpg'</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = p</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img)</span><br></pre></td></tr></table></figure></div><h2 id="配置-file-loader"><a href="#配置-file-loader" class="headerlink" title="配置 file-loader"></a>配置 file-loader</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123; <span class="comment">// 解析loader的方式</span></span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  rules:[</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.jpg$/</span>,</span><br><span class="line">      use:<span class="string">'file-loader'</span> </span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="实现-file-loader"><a href="#实现-file-loader" class="headerlink" title="实现 file-loader"></a>实现 file-loader</h2><p>file-loader 的原理：</p><p>将读出来的文件写到dist目录中，同时文件名是根据读到的二进制文件以MD5的形式生成</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file-loader.js</span></span><br><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> filename = loaderUtils.interpolateName(<span class="keyword">this</span>, <span class="string">'[hash:8].[ext]'</span>,</span><br><span class="line">                                             &#123;<span class="attr">content</span>:source&#125;)</span><br><span class="line">  <span class="keyword">this</span>.emitFile(filename, source) <span class="comment">// 发射图片文件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`module.exports="<span class="subst">$&#123;filename&#125;</span>"`</span><span class="comment">// file-loader返回一个路径</span></span><br><span class="line">&#125;</span><br><span class="line">loader.raw = <span class="literal">true</span> <span class="comment">// source源文件二进制读取</span></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div><h1 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h1><p>url-loader 会将引入的文件以 base64 格式编码，生成 DataURL，再把这个字符串打包到 JavaScript</p><p>url-loader 限制文件大小，超过大小时会使用 file-loader 处理</p><h2 id="配置-url-loader"><a href="#配置-url-loader" class="headerlink" title="配置 url-loader"></a>配置 url-loader</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123; <span class="comment">// 解析loader的方式</span></span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  rules:[</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.jpg$/</span>,</span><br><span class="line">      use:&#123;</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options:&#123;</span><br><span class="line">          limit: <span class="number">200</span>*<span class="number">1024</span> <span class="comment">// 文件限制200k</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;     </span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="实现-url-loader"><a href="#实现-url-loader" class="headerlink" title="实现 url-loader"></a>实现 url-loader</h2><p>获取限制文件大小 limit，超过文件大小返回 base64 格式，否则返回 file-loader 的处理结果</p><p>base64 格式：<code>data:image/jpg;base64,...</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url-loader.js</span></span><br><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="keyword">let</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>)  <span class="comment">// 此模块可以拿到文件类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;limit&#125; = loaderUtils.getOptions(<span class="keyword">this</span>) <span class="comment">// 获取loader limit限制</span></span><br><span class="line">  <span class="keyword">if</span>(limit &amp;&amp; limit&gt;source.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`module.exports = "data:<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">      mime.getType(<span class="keyword">this</span>.resourcePath) <span class="regexp">//</span> 根据文件绝对路径获取类型</span></span></span><br><span class="line"><span class="string"><span class="subst">    &#125;</span>;base64,<span class="subst">$&#123;source.toString(<span class="string">"base64"</span>)&#125;</span>"`</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'./file-loader.js'</span>).call(<span class="keyword">this</span>, source)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">loader.raw = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 默认情况下，资源文件会被转化为 UTF-8 字符串，然后传给 loader。</span></span><br><span class="line"><span class="comment">// 通过设置 raw，loader 可以接收原始的 Buffer</span></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5d904e135188255cd02a1e15" target="_blank" rel="noopener">webpack loaders 从上手到理解系列：file-loader</a></p><p><a href="https://juejin.im/post/5d90cb2c6fb9a04e31420541#heading-9" target="_blank" rel="noopener">webpack loader 从上手到理解系列：url-loader</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;file-loader&quot;&gt;&lt;a href=&quot;#file-loader&quot; class=&quot;headerlink&quot; title=&quot;file-loader&quot;&gt;&lt;/a&gt;file-lo</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="手写loader" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%89%8B%E5%86%99loader/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 性能优化（7）热更新</title>
    <link href="https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%887%EF%BC%89%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%887%EF%BC%89%E7%83%AD%E6%9B%B4%E6%96%B0/</id>
    <published>2020-02-04T15:06:55.000Z</published>
    <updated>2020-02-04T15:10:16.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="热更新-HMR（Hot-Module-Replacement）"><a href="#热更新-HMR（Hot-Module-Replacement）" class="headerlink" title="热更新 HMR（Hot Module Replacement）"></a>热更新 HMR（Hot Module Replacement）</h1><p>热更新指对数据变化的部分进行局部跟新，而不进行页面刷新</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol><li><p>devServer 中设置 hot 属性 true</p></li><li><p>使用 webpack.HotModuleReplacementPlugin() 热更新插件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: ture, <span class="comment">// 开启热更新</span></span><br><span class="line">    contentBase: <span class="string">'./dist'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="comment">// 热更新插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>修改源文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js 引用 source.js</span></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'./resource.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot)&#123; <span class="comment">// 是否热更新</span></span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./resource.js'</span>, () =&gt; &#123; <span class="comment">//如果热更新了，在热更新完成后调用回调</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件更新了'</span>);</span><br><span class="line">    <span class="keyword">let</span> str = <span class="built_in">require</span>(<span class="string">'./resource.js'</span>); <span class="comment">// 不能使用import，因为import只能写在页面顶端</span></span><br><span class="line">    <span class="built_in">console</span>.log(str.default);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果只单纯的更新文件，上面可以简写为</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'./source'</span></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot)&#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;热更新-HMR（Hot-Module-Replacement）&quot;&gt;&lt;a href=&quot;#热更新-HMR（Hot-Module-Replacement）&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="性能优化" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 性能优化（6）懒加载</title>
    <link href="https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%886%EF%BC%89%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%886%EF%BC%89%E6%87%92%E5%8A%A0%E8%BD%BD/</id>
    <published>2020-02-04T15:06:17.000Z</published>
    <updated>2020-02-04T15:09:50.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h1><p>实现代码的按需加载</p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>index.js 中点击 button ,动态加载 source.js 的内容，读取内容并打印</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">let</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>)</span><br><span class="line">button.innerHTML = <span class="string">'hello'</span></span><br><span class="line">button.addEventListener(<span class="string">'click'</span>,()=&gt;&#123;</span><br><span class="line">  <span class="comment">// es6 草案中的语法 jsonp实现动态加载文件</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./source.js'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.default)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(button)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// source.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'wangyi'</span></span><br></pre></td></tr></table></figure></div><p>es6 import 可以实现按需加载，并返回一个 promise，回调中可以拿到加载的数据；vue , react 的懒加载也是这个原理</p><p>打包后生成 index.js 和 0.js（用来实现按需加载，JSONP 原理）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;懒加载&quot;&gt;&lt;a href=&quot;#懒加载&quot; class=&quot;headerlink&quot; title=&quot;懒加载&quot;&gt;&lt;/a&gt;懒加载&lt;/h1&gt;&lt;p&gt;实现代码的按需加载&lt;/p&gt;
&lt;h1 id</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="性能优化" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 性能优化（5）抽离公共代码</title>
    <link href="https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%885%EF%BC%89%E6%8A%BD%E7%A6%BB%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81/"/>
    <id>https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%885%EF%BC%89%E6%8A%BD%E7%A6%BB%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81/</id>
    <published>2020-02-04T15:05:54.000Z</published>
    <updated>2020-02-04T15:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>多页应用一般会重复多次使用部分公共代码，这样每次加载单页的时候，就会重复去加载这些公共代码，会造成以下问题：</p><ol><li>相同资源重复被加载，浪费用户流量，增加服务器成本</li><li>每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验</li></ol><p>如果将这些公共代码抽取出来，并让浏览器缓存起来，用户在请求资源的时候，可以直接读取缓存中的这些代码，这样就能解决以上问题。</p><h1 id="抽离公共代码"><a href="#抽离公共代码" class="headerlink" title="抽离公共代码"></a>抽离公共代码</h1><p>入口文件有两个：index.js ，other.js；两者都引用了 a.js 和 b.js，可以将 a 和 b 抽离出来打包成 common.js，然后让 index.js 和 other.js 直接引用 common.js 即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    splitChunks: &#123; <span class="comment">// 分割代码块</span></span><br><span class="line">      cacheGroups: &#123; <span class="comment">// 缓存组</span></span><br><span class="line">        common: &#123; <span class="comment">// 公共的模块</span></span><br><span class="line">          chunks: <span class="string">'initial'</span>, <span class="comment">// 刚开始就要抽离</span></span><br><span class="line">          minSize: <span class="number">0</span>, <span class="comment">// 大于0字节抽离</span></span><br><span class="line">          minChunks: <span class="number">2</span> <span class="comment">// 重复使用2次抽离</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这样就能够在一开始就将大于0字节的，并且使用2次以上的代码抽离出来，npm run build  得到的文件为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dist</span><br><span class="line">|</span><br><span class="line">. -- index.html</span><br><span class="line">|</span><br><span class="line">. -- commom~index~other.js</span><br><span class="line">|</span><br><span class="line">. -- index.js</span><br><span class="line">|</span><br><span class="line">. -- other.js</span><br></pre></td></tr></table></figure></div><p>index.js 和 other.js 都使用了抽离出来的公共代码 commom<del>index</del>other.js </p><h1 id="抽离公共第三方库"><a href="#抽离公共第三方库" class="headerlink" title="抽离公共第三方库"></a>抽离公共第三方库</h1><p>在上面的基础上，index.js 和 other.js 都引用了 jquery 库，配置 cacheGroups 的 vendor 属性抽离第三方库</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    splitChunks:&#123; <span class="comment">// 分割代码</span></span><br><span class="line">      cacheGroups:&#123; <span class="comment">// 缓存组</span></span><br><span class="line">        common:&#123; <span class="comment">// 公共的模块</span></span><br><span class="line">          chunks:<span class="string">'initial'</span>,</span><br><span class="line">          minSize:<span class="number">0</span>,</span><br><span class="line">          minChunks:<span class="number">2</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        vendor:&#123;</span><br><span class="line">          test:<span class="regexp">/node_modules/</span>, <span class="comment">// 把此目录下符合条件的库抽离出来</span></span><br><span class="line">          chunks:<span class="string">'initial'</span>, <span class="comment">// 刚开始就要抽离</span></span><br><span class="line">          minSize:<span class="number">0</span>, <span class="comment">// 大小大于0字节的时候需要抽离出来</span></span><br><span class="line">          minChunks:<span class="number">2</span>, <span class="comment">// 重复2次使用的时候需要抽离出来</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>但是这样配置，common 会优先 vendor 抽离，jquery 会被当作普通公共模块和 a.js ，b.js 一起抽离到  commom<del>index</del>other.js 中；后面的 vendor 属性就没用了，</p><p>为了将第三方公共模块单独抽离出来，方便其他文件使用，给 vendor 添加优先级属性 priority，设置先抽离第三方公共模块再抽离普通模块</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    splitChunks:&#123; <span class="comment">// 分割代码</span></span><br><span class="line">      cacheGroups:&#123; <span class="comment">// 缓存组</span></span><br><span class="line">        common:&#123; <span class="comment">// 公共的模块</span></span><br><span class="line">          chunks:<span class="string">'initial'</span>,</span><br><span class="line">          minSize:<span class="number">0</span>,</span><br><span class="line">          minChunks:<span class="number">2</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        vendor:&#123;</span><br><span class="line">          priority: <span class="number">1</span>,  <span class="comment">// 添加优先级</span></span><br><span class="line">          test:<span class="regexp">/node_modules/</span>, <span class="comment">// 把此目录下符合条件的库抽离出来</span></span><br><span class="line">          chunks:<span class="string">'initial'</span>, <span class="comment">// 刚开始就要抽离</span></span><br><span class="line">          minSize:<span class="number">0</span>, <span class="comment">// 大小大于0字节的时候需要抽离出来</span></span><br><span class="line">          minChunks:<span class="number">2</span>, <span class="comment">// 重复2次使用的时候需要抽离出来</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>打包得到的文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dist</span><br><span class="line">|</span><br><span class="line">. -- index.html</span><br><span class="line">|</span><br><span class="line">. -- commom~index~other.js</span><br><span class="line">|</span><br><span class="line">. -- index.js</span><br><span class="line">|</span><br><span class="line">. -- other.js</span><br><span class="line">|</span><br><span class="line">. -- vendor~index~other.js</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h1&gt;&lt;p&gt;多页应用一般会重复多次使用部分公</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="性能优化" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>webpak 性能优化（4）tree-shanking&amp;scope-hostig</title>
    <link href="https://grit0821.github.io/Blog/2020/02/04/webpak-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%884%EF%BC%89tree-shanking-scope-hostig/"/>
    <id>https://grit0821.github.io/Blog/2020/02/04/webpak-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%884%EF%BC%89tree-shanking-scope-hostig/</id>
    <published>2020-02-04T15:05:41.000Z</published>
    <updated>2020-02-04T15:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>两个webpack自带的优化：tree-shaking 和 scope-hosting 都是在生产（production）模式下</p><h1 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree-shaking"></a>tree-shaking</h1><p>在 mode: production 下，使用 import 引入模块，打包时会忽略模块中没有使用的代码</p><p>举例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + <span class="string">'sum'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> minus = <span class="function">(<span class="params">a, b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b+<span class="string">'minus'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;sum, minus&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> calc <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(calc.sum(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure></div><p>index.js 只使用了 test.js 中的 sum 方法；在开发模式下打包，sum 和 minus 都会被打包，在生产模式下，只打包 sum</p><p>如果使用 require 加载，sum 和 minus 都会打包</p><h1 id="scope-hosting-变量提升"><a href="#scope-hosting-变量提升" class="headerlink" title="scope-hosting 变量提升"></a>scope-hosting 变量提升</h1><p>在生产环境下可以提升作用域</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> d = a + b + c;</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure></div><p>webpack在生产环境下打包的时候，会直接将 d 打包成 a+b+c 的结果，无需声明多个变量再去相加</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;两个webpack自带的优化：tree-shaking 和 scope-hosting 都是在生产（production）模式下&lt;/p&gt;
&lt;h1 id=&quot;tree-shaking&quot;&gt;</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="性能优化" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 性能优化（3）happypack多线程打包</title>
    <link href="https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%883%EF%BC%89happypack%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%93%E5%8C%85/"/>
    <id>https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%883%EF%BC%89happypack%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%93%E5%8C%85/</id>
    <published>2020-02-04T15:05:26.000Z</published>
    <updated>2020-02-04T15:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>使用 happypack 模块进行多线程打包，适用于文件较大的情况，本身启动多线程需要耗费时间</p><p>安装 happypack </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add happypack <span class="literal">-D</span></span><br></pre></td></tr></table></figure></div><p>修改配置文件，实现多线程打包 js 和 css</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="comment">// 多线程打包</span></span><br><span class="line"><span class="keyword">let</span> Happypack = <span class="built_in">require</span>(<span class="string">'happypack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(<span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    contentBase: <span class="string">'./dist'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    noParse: <span class="regexp">/jquery/</span>, <span class="comment">// jquery 独立的库，没有依赖，不去解析</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, <span class="comment">// \代表转义</span></span><br><span class="line">        include: path.resolve(<span class="string">'src'</span>), <span class="comment">// </span></span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: <span class="string">'Happypack/loader?id=js'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: <span class="string">'Happypack/loader?id=css'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./public/index.html'</span>,</span><br><span class="line"></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/\.\/locale/</span>, /moment/),</span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: path.resolve(__dirname, <span class="string">'dist'</span>, <span class="string">'manifest.json'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> Happypack(&#123;</span><br><span class="line">      id: <span class="string">'js'</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">'@babel/preset-env'</span>, <span class="string">'@babel/preset-react'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> Happypack(&#123;</span><br><span class="line">      id: <span class="string">'css'</span>,</span><br><span class="line">      use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>use: &#39;Happypack/loader?id=js&#39;</code>，表示使用 <code>id:&#39;js&#39;</code>的 happypack 实例进行打包</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;使用 happypack 模块进行多线程打包，适用于文件较大的情况，本身启动多线程需要耗费时间&lt;/p&gt;
&lt;p&gt;安装 happypack &lt;/p&gt;
&lt;div class=&quot;code-a</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="性能优化" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 性能优化（2）DllPlugin&amp;DllReferencePlugin</title>
    <link href="https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%882%EF%BC%89DllPlugin-DllReferencePlugin/"/>
    <id>https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%882%EF%BC%89DllPlugin-DllReferencePlugin/</id>
    <published>2020-02-04T15:01:01.000Z</published>
    <updated>2020-02-04T15:08:20.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="场景需求"><a href="#场景需求" class="headerlink" title="场景需求"></a>场景需求</h1><p>在打包一个 react 的项目的时候，会把 react 和 react-dom 这两个库打包进来。这两个库很大且基本不会变，所以如果每次打包都要打包这两个第三方包的话，浪费时间，消耗性能</p><p>所以可以将 react 和 react-dom 单独打包好，然后动态链接引入即可。第二次打包时，发现react和react-dom已经被打包好了，那么就不需要再打包了，这样就大大提升了性能</p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>在 src 下新建 test.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'wangyi'</span></span><br></pre></td></tr></table></figure></div><p>创建 webpack.config.react.js 用来打包 test.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  webpack.config.react.js </span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode:<span class="string">'development'</span>,</span><br><span class="line">  entry:&#123;</span><br><span class="line">    test:<span class="string">'./src/test.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:<span class="string">'[name].js'</span>,</span><br><span class="line">    path:path.resolve(__dirname,<span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用上面的配置文件执行 webpack</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npx webpack -<span class="literal">-config</span> webpack.config.react.js</span><br></pre></td></tr></table></figure></div><p>打包得到 /dist/test.js 里面是一个立即执行函数表达式，返回 module.exports 的 ‘wangyi’</p><p>为了使用一个变量去接收导出的值，可以修改配置文件的 output 属性</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  webpack.config.react.js </span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode:<span class="string">'development'</span>,</span><br><span class="line">  entry:&#123;</span><br><span class="line">    test:<span class="string">'./src/test.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:<span class="string">'[name].js'</span>,</span><br><span class="line">    path:path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">    library:<span class="string">'a'</span>,<span class="comment">//这样打包后的结果就被变量a接收</span></span><br><span class="line">    libraryTarget:<span class="string">'var'</span>,<span class="comment">//commonjs、umd、var、this等等，默认var，这样就相当于var a = 打包后的结果</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="实际使用-react-为例"><a href="#实际使用-react-为例" class="headerlink" title="实际使用(react 为例)"></a>实际使用(react 为例)</h1><p>第三方包 react ，react-dom 也可以像 test.js 提前打包好，用一个变量去接收，使用的时候直接引入已经打包好的动态链接库</p><p>打包使用的配置文件 webpack.config.react.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  webpack.config.react.js </span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    react: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'_dll_[name].js'</span>, <span class="comment">// 生成 _dll_react.js</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    library: <span class="string">'_dll_[name]'</span>,</span><br><span class="line">    <span class="comment">//  libraryTarget: 'var'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="string">'_dll_[name]'</span>,<span class="comment">//这个name要与output中的library同名</span></span><br><span class="line">      path: path.resolve(__dirname, <span class="string">'dist'</span>, <span class="string">'manifest.json'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>打包时使用 webpack 内置插件 DllPlugin 根据之前打包的结果生成动态链接库的清单 manifest.json，每次打包时会先去查找下清单里是否已经存在这个依赖，如果已经存在，则不打包，如果还没存在，则需要打包</p><p>运行<code>npx webpack --config webpack.config.react.js</code> ，得到打包j结果 _dll_react.js 动态链接库文件和 manifest.json 清单</p><p>为了使用动态链接库，在 src 下的 index.html 引入 _dll_react.js ，路径<code>/</code>表示根目录，打包后的’dist/index.html’ 正好可以引用，也可使用当前路径 <code>./</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/_dll_react.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 表示根目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>现在引入 react，react-dom 等第三方库的时候，首先查找是否在 manifest 清单中，不在清单中会打包，在清单中不打包，直接使用 html 引入的动态链接库；判断是否在清单中需要在打包时使用 DllReferencePlugin</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: path.resolve(__dirname, <span class="string">'dist'</span>, <span class="string">'manifest.json'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这样再打包时，react，react-dom不再打包了，直接使用第一次打包生成的动态链接库，文件小很多 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;场景需求&quot;&gt;&lt;a href=&quot;#场景需求&quot; class=&quot;headerlink&quot; title=&quot;场景需求&quot;&gt;&lt;/a&gt;场景需求&lt;/h1&gt;&lt;p&gt;在打包一个 react 的项目的</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="性能优化" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 性能优化（1）</title>
    <link href="https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%881%EF%BC%89/"/>
    <id>https://grit0821.github.io/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%881%EF%BC%89/</id>
    <published>2020-02-04T11:20:26.000Z</published>
    <updated>2020-02-06T14:46:34.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">-<h1 id="noParse-不解析没有依赖的库"><a href="#noParse-不解析没有依赖的库" class="headerlink" title="noParse 不解析没有依赖的库"></a>noParse 不解析没有依赖的库</h1><p>module 的 noParse 选项可以指定模块不进行依赖库的解析，直接进引入，加快打包速度；适用于引入一些没有依赖的独立的第三方库（例如 jquery）</p><p>正常引用 jquery <code>import jq from jquery</code> 时，会解析 jquery 库有没有依赖的包；设置 noParse 属性后，忽略解析，直接打包</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    noParse: <span class="regexp">/jquery/</span>, <span class="comment">// jquery中没有依赖，所有不用解析</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="loader-解析时排除和指定目录"><a href="#loader-解析时排除和指定目录" class="headerlink" title="loader 解析时排除和指定目录"></a>loader 解析时排除和指定目录</h1><p>解析文件时，例如所有 js 文件，会默认查找 /node_modules/ 目录，exclude 选项可以排除查找目录；include 选项可以指定查找目录；两者使用一个即可，都可以缩小解析范围</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    noParse: <span class="regexp">/jquery/</span>, <span class="comment">// jquery 独立的库，没有依赖，不去解析</span></span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        include: path.resolve(<span class="string">'src'</span>), <span class="comment">// 只去src目录查找</span></span><br><span class="line">        <span class="comment">// exclude: /node_modules/, // 忽略node_modules目录</span></span><br><span class="line">        use:&#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options:&#123;</span><br><span class="line">            presets:[<span class="string">'@babel/preset-env'</span>,<span class="string">'@babel/preset-react'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="webpack-IgnorePlugin-忽略第三方包的指定目录"><a href="#webpack-IgnorePlugin-忽略第三方包的指定目录" class="headerlink" title="webpack IgnorePlugin 忽略第三方包的指定目录"></a>webpack IgnorePlugin 忽略第三方包的指定目录</h1><p>IgnorePlugin 是 webpack 自带插件，作用是打包时忽略第三方包的指定目录</p><p>例如：安装引入 moment 包，这个库主要用来对时间进行格式化处理，支持多个语言</p><p>引入 moment 并使用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置语言</span></span><br><span class="line">moment.locale(<span class="string">'zh-cn'</span>)</span><br><span class="line"><span class="keyword">let</span> r = moment().endOf(<span class="string">'day'</span>).fromNow()</span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br></pre></td></tr></table></figure></div><p>此时引入了整个 moment 模块，虽然实际只使用了中文模块 <code>moment/locale/zh-cn</code>，但 <code>moment/locale/</code>下的所有语言模块也都打包进去了</p><p>使用 webpack.IgnorePlugin，设置在引入 moment 模块时，忽略 moment 下<code>./loacle</code>目录下的子模块</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">plugins:[</span><br><span class="line">    <span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/\.\/locale/</span>,/moment/)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面这样设置后，就无法使用所有的语言模块了，为了使用中文模块需要手动引入；这样既实现了功能，由减少了打包体积</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span><br><span class="line"><span class="comment">// 引入中文模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/zh-cn'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置语言</span></span><br><span class="line">moment.locale(<span class="string">'zh-cn'</span>)</span><br><span class="line"><span class="keyword">let</span> r = moment().endOf(<span class="string">'day'</span>).fromNow()</span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
-

&lt;h1 id=&quot;noParse-不解析没有依赖的库&quot;&gt;&lt;a href=&quot;#noParse-不解析没有依赖的库&quot; class=&quot;headerlink&quot; title=&quot;noParse 不解</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    <category term="性能优化" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 解决跨域问题</title>
    <link href="https://grit0821.github.io/Blog/2020/02/01/webpack-%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://grit0821.github.io/Blog/2020/02/01/webpack-%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-01T15:21:34.000Z</published>
    <updated>2020-02-01T15:26:04.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>跨域问题基于浏览器的同源策略，即协议，域名，端口都一致浏览器才能发送请求，<strong>而服务端发送请求没有跨域的问题</strong></p><p>使用 webpack 进行开发解决跨域问题主要有以下方法：</p><h1 id="通过配置服务器代理"><a href="#通过配置服务器代理" class="headerlink" title="通过配置服务器代理"></a>通过配置服务器代理</h1><p>不能操控后端代码时（比如前后端联调）可用</p><p>在配置文件 webpack.config.js 中添加  devServer 配置，然后配置它的 proxy 属性，webpack-dev-server 在起服务后，会把匹配的本地请求转到  proxy 里配置的服务器上去请求，通过服务端的转发，实现跨域</p><p>例如：</p><ul><li>前端服务端口（dev-server）8080</li><li>联调的后端端口：3000</li></ul><p>如果在前端发送请求<code>xhr.open(&#39;GET&#39;, &#39;/api/user&#39;)</code>实际上完整的请求 url 是 <code>http://localhost:8080/api/user</code>，直接请求报错，因为前端服务端口没有这个接口</p><p>现在给 devServer 配置 proxy</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  proxy: &#123;<span class="string">'api'</span>:<span class="string">'http://localhost:3000'</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>通过 webpack-dev-server 起服务器， 在遇到 /api/user 这种以 /api 开头的请求的时候，它不再往本地 <code>localhost:8080</code>发了，而是向对应的<code>http://localhost:3000</code>发请求。这是一种后端而非浏览器的的请求转发，有跨域问题。这个时候，虽然在浏览器查看前端发的请求地址是<code>http://localhost:8080/api/user</code>，但其实它的背后真正获取响应的请求是<code>http://localhost:3000/api/user</code></p><p>实际后端接口没有类似 api 这种统一前缀，为了方便配置，proxy 提供了 pathRewrite参数改写请求路径</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">proxy: &#123;</span><br><span class="line"><span class="string">'/api'</span>: &#123;</span><br><span class="line">target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">pathRewrite: &#123;</span><br><span class="line"><span class="string">'/api'</span>: <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>此时前端发送请求<code>xhr.open(&#39;GET&#39;,&#39;/api/user&#39;)</code></p><p>前端请求的完整 url <code>http://localhost:3000/api/user</code></p><p>经过代理后最终请求 url <code>http://localhost:3000/user</code></p><h1 id="在-dev-server-内-mock-数据"><a href="#在-dev-server-内-mock-数据" class="headerlink" title="在 dev-server 内 mock 数据"></a>在 dev-server 内 mock 数据</h1><p>直接使用 webapck-dev-server mock 数据，mock 接口和前端符合同源策略</p><p>webpack-dev-server 内部其实是自己起了一个express来做服务</p><p>webpack 的 devServer 配置提供了一个<code>before</code>方法，在启动服务之前，这个方法会被执行，我们可以把我们 mock 数据的逻辑写在这里</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  before(app)&#123; </span><br><span class="line">    app.get(<span class="string">'/api/user'</span>,(req, res)=&gt;&#123;</span><br><span class="line">      res.json(&#123;<span class="attr">name</span>: <span class="string">'wangyi'</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>before 方法会传一个参数 app 供我们使用，这个参数就是 webpack-dev-server 内部起的express对象</p><h1 id="在服务端启动-webpack"><a href="#在服务端启动-webpack" class="headerlink" title="在服务端启动 webpack"></a>在服务端启动 webpack</h1><p>提供接口的服务端代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/user'</span>,(req, res)=&gt;&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">name</span>: <span class="string">'webpack wangyi123'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></div><p>把 webpack 构建放在服务端 server.js 中，服务器和前端共用一个地址；</p><p>通过服务端起 webpack 需要中间件 webpack-dev-middleware，整体逻辑为：</p><p>获取 webpack 模块 -&gt; 获取 webpack 配置文件 -&gt; 将配置文件传给 webpack 执行，获得compiler 实例 -&gt; 把 compiler 实例传给 webpack-dev-middleware 中间件，然后整个交给express 作为 express 中间件执行 -&gt; done</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> webapck = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">let</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>)</span><br><span class="line"><span class="keyword">let</span> compiler = webapck(config)</span><br><span class="line"><span class="keyword">let</span> middle = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(middle(compiler))</span><br><span class="line">app.get(<span class="string">'/api/user'</span>,(req, res)=&gt;&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">name</span>: <span class="string">'wangyi123'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is on 3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>此时通过 <code>node server.js</code>起服务器和 webpack 前端构建</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一种方法是我们提倡的跨域配置，配置代理，首选推荐</p><p>第二和第三种方法其实是在你能控制后端工程的情况下，把前后端工程合并成一个工程了，区别是第二种方法相当于把后端接口移到前端工程来起，第三种方法是把前端工程构建移到后端工程来起。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="[https://champyin.com/2019/11/05/webpack%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/](https://champyin.com/2019/11/05/webpack解决跨域的几种方法/)">webpack解决跨域的几种方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;跨域问题基于浏览器的同源策略，即协议，域名，端口都一致浏览器才能发送请求，&lt;strong&gt;而服务端发送请求没有跨域的问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 webpack 进行开</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 图片处理</title>
    <link href="https://grit0821.github.io/Blog/2020/01/31/webpack%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
    <id>https://grit0821.github.io/Blog/2020/01/31/webpack%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/</id>
    <published>2020-01-31T03:43:34.000Z</published>
    <updated>2020-01-31T04:27:08.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">三种引入图片的方式：<h2 id="1在-js-中创建-Image-实例引入"><a href="#1在-js-中创建-Image-实例引入" class="headerlink" title="1在 js 中创建 Image 实例引入"></a>1在 js 中创建 Image 实例引入</h2><p>把图片当做模块引入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">"./logo.png"</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = <span class="string">'logo'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img)</span><br></pre></td></tr></table></figure></div><p>使用 file-loader，默认在内部生成一张图片到 build 目录下，返回生成的图片名字</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'file-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        esModule: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><h2 id="2在-css-中引入-background-url"><a href="#2在-css-中引入-background-url" class="headerlink" title="2在 css 中引入 background: url( )"></a>2在 css 中引入 background: url( )</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(./logo.png)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后把 css 文件当做模块引入到入口文件 index.js，import css 文件时候自动调用 file-loader</p><h2 id="3HTML-lt-img-src-quot-quot-alt-quot-quot-gt-引入"><a href="#3HTML-lt-img-src-quot-quot-alt-quot-quot-gt-引入" class="headerlink" title="3HTML &lt;img src=&quot;&quot; alt=&quot;&quot;&gt;引入"></a>3HTML <code>&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</code>引入</h2><p> HTML<code>&lt;img src=&quot;./log.png&quot;&gt;</code>直接打包的话由于不是模块引入，build 中的 src 路径是错误的</p><p>同时使用 html-withimg-loader 和 file-loader 改变 build 后<code>&lt;img&gt;</code>的 src</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">  use: <span class="string">'html-withimg-loader'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'file-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        esModule: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><h2 id="使用-url-loader-处理图片，前两种引入方式都适用"><a href="#使用-url-loader-处理图片，前两种引入方式都适用" class="headerlink" title="使用 url-loader 处理图片，前两种引入方式都适用"></a>使用 url-loader 处理图片，前两种引入方式都适用</h2><p>处理图片经常使用 url-loader，当我们的图片小于多少 k 的时候，用 base 64 来转化，否则使用 file-loader 产生真实的图片</p><p>base64 编码可以将一张图片编码成字符串，编码后大小略有增加，但可以减少 http 请求</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">  use:&#123;</span><br><span class="line">    loader:<span class="string">'url-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      limit: <span class="number">1</span>, <span class="comment">// 超过限制使用 file-loader</span></span><br><span class="line">      outputPath: <span class="string">'./img/'</span>,</span><br><span class="line">      esModule: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/5d90cb2c6fb9a04e31420541#heading-9" target="_blank" rel="noopener">webpack loader 从上手到理解系列：url-loader</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
三种引入图片的方式：

&lt;h2 id=&quot;1在-js-中创建-Image-实例引入&quot;&gt;&lt;a href=&quot;#1在-js-中创建-Image-实例引入&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 入门</title>
    <link href="https://grit0821.github.io/Blog/2020/01/21/webpack-%E5%85%A5%E9%97%A8/"/>
    <id>https://grit0821.github.io/Blog/2020/01/21/webpack-%E5%85%A5%E9%97%A8/</id>
    <published>2020-01-21T08:40:59.000Z</published>
    <updated>2020-02-01T08:54:02.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>webpack 是一个基于 NodeJS 开发的静态模块打包工具，</p><p>当 webpack 处理应用程序时，它会递归地构建一个依赖关系图( dependency graph )，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle</p><p>代码构建是前端工程化，自动化的体现，把一系列的构建流程由代码去自动实现，提高生产效率，包括如下内容：</p><ul><li>代码转换：TS 编译 JS ，SCSS 编译 CSS 等</li><li>文件优化：压缩 js , css , html, 压缩合并图片等</li><li>代码分割：提取多个页面的公共代码，提取首屏不需要执行的代码让其异步加载</li><li>模块合并</li><li>自动刷新：监听本地源码的变化，自动重新构建，刷新浏览器</li><li>代码校验</li><li>自动发布：更新完代码后自动构建上线代码</li></ul><h1 id="安装-webpack"><a href="#安装-webpack" class="headerlink" title="安装 webpack"></a>安装 webpack</h1><p>同时安装 webpack 和 webpack-cli 到开发依赖 devDependencies 中，两种方式效果相同</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack<span class="literal">-cli</span> -<span class="literal">-save</span><span class="literal">-d</span></span><br><span class="line">npm i webpack webpack<span class="literal">-ci</span> <span class="literal">-D</span></span><br></pre></td></tr></table></figure></div><h1 id="webpack-config-js-配置"><a href="#webpack-config-js-配置" class="headerlink" title="webpack.config.js 配置"></a>webpack.config.js 配置</h1><p>webpack 使用时必须要先写配置文件 webpack.config.js</p><h2 id="入口（entry）"><a href="#入口（entry）" class="headerlink" title="入口（entry）"></a>入口（entry）</h2><p>入口（entry）表示使用哪个 js 文件作为构建内部依赖的开始，从入口文件开始寻找相关依赖。</p><p>可以设置单入口或多入口</p><h2 id="出口（output）"><a href="#出口（output）" class="headerlink" title="出口（output）"></a>出口（output）</h2><p>出口（output）表示最后输出的文件，只能指定一个输出配置</p><p>需要设置 output 的 filename 和 path，为了清理缓存 filename 可以加入hash 后缀， path 指定的打包路径必须为绝对路径，需要使用 Node.js 的 path 模块</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path  = <span class="built_in">require</span>(<span class="string">'path'</span>) <span class="comment">// 引入 Node.js 内置 path 模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filname: <span class="string">'build.[hash:8].js'</span>, <span class="comment">// 文件名添加8位哈希后缀</span></span><br><span class="line">        path: path.resolve(<span class="string">'./build'</span>) <span class="comment">// 使用绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="模式（mode）"><a href="#模式（mode）" class="headerlink" title="模式（mode）"></a>模式（mode）</h2><p>选择生产模式（production） 还是开发模式（development），生产模式会把代码压缩成一行，开发模式有响应的注释，可读性好</p><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>webpack默认只能打包处理 Js 类型的文件，无法处理其它类型的文件</p><p>如果要处理非 Js 类型的文件，需要安装一些合适 loader 加载器</p><p>loader 重要特性：</p><ol><li>loader 支持链式传递。能够对资源使用流水线(pipeline)。一组链式的 loader 将按照相反的顺序执行</li><li>插件（plugin）可以对 loader 进行拓展</li></ol><p>常见的 loader:</p><ol><li>css-loader ：加载 css 模块</li><li>style-loader ：把 css 变成 <code>&lt;style&gt;</code> 标签插入到 HTML 里</li><li>less-loader ：加载 less 模块为 css 模块</li></ol><h2 id="模块（module）"><a href="#模块（module）" class="headerlink" title="模块（module）"></a>模块（module）</h2><p>module 中用来配置模块加载方式，会对指定后缀的文件按顺序使用一系列的 loader</p><p>使用 loader 的顺序是倒叙的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [ <span class="comment">// 从右往左写</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">'style-loader'</span>&#125;, </span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">'css-loader'</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use:[</span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">'style-loader'</span>&#125;, </span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">'css-loader'</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">'less-loader'</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>对所有后缀为<code>.css</code>的文件使用 css-loader 加载，然后使用 style-loader 加载变为 <code>&lt;script&gt;</code>标签</p><p>对所有后缀为<code>.less</code>的文件使用 less-loader加载变为 css，然后使用 css-loader 加载，然后使用 style-loader 加载变为 <code>&lt;script&gt;</code>标签</p><h2 id="插件（plugins）"><a href="#插件（plugins）" class="headerlink" title="插件（plugins）"></a>插件（plugins）</h2><p>插件可以拓展 webpack 的功能，进行代码压缩优化等，webpack 内置了一些插件，大部分需要安装</p><p>插件一般是 Class ，使用一个插件需要安装后 require 引入，使用 new 操作符创建一个自定义实例（可以传参 option），然后添加到配置文件的 plugins 数组中</p><p>常用插件：</p><ol><li><p>html-webpack-plugin: 将 html 打包到 build 文件夹下，并且可以引入打包的 js</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'wepack'</span>) <span class="comment">// 引入 webpack 内部插件</span></span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>) <span class="comment">// 安装插件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">            hash: ture,</span><br><span class="line">            filename: <span class="string">'index.html'</span>,</span><br><span class="line">            minify:&#123;</span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span>, <span class="comment">// 删除双引号</span></span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 删除空格</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>clean-webpack-plugin: 每次打包时清空打包目录文件夹，避免文件堆叠</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'./dist'</span>])<span class="comment">// 可以不写，默认打包目录；也可以用字符串或者数组</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>copy-webpack-plugin: 拷贝文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([ <span class="comment">// 多个拷贝参数设置数组</span></span><br><span class="line">      &#123;<span class="attr">from</span>: <span class="string">'./doc'</span>,<span class="attr">to</span>: <span class="string">'./'</span>&#125; <span class="comment">// 拷贝到打包目录dist</span></span><br><span class="line">    ]), </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>webpack.BannerPlugin (webpack 内置插件) : 在打包的文件开头添加注释声明</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'make 2020 by wy'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="dev-server"><a href="#dev-server" class="headerlink" title="dev-server"></a>dev-server</h2><p>安装 webpack-dev-server 然后配置 dev-server 可以配置开发服务器，在内存中打包文件，相当于使用打包出来的文件直接开一个服务器用来配合开发</p><p>首先安装 webpack-dev-server</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure></div><p>然后设置 package.json 中的 scripts 属性添加运行服务器的命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts":&#123;</span><br><span class="line">    "dev": "webpack-dev-server"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后设置 webpack.config.js 的 dev-server 属性</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./build'</span>, </span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">        hot: ture</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>contentBase : 指定项目启动后的主页面</li><li>compress : 进行服务器压缩</li><li>open : 项目启动后自动打开浏览器</li><li>hot : 启动热更行，可以不刷新页面更新代码</li></ul><h2 id="watch-监控打包"><a href="#watch-监控打包" class="headerlink" title="watch 监控打包"></a>watch 监控打包</h2><p>配置 watch 和 watchOptions 可以开启实时监控打包</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  watch: <span class="literal">true</span>,</span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    poll: <span class="number">1000</span> , <span class="comment">// 每秒询问1000次</span></span><br><span class="line">    aggregateTimeout: <span class="number">500</span>, <span class="comment">// 防抖500ms</span></span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span> <span class="comment">// 忽略监控的文件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;webpack 是一个基于 NodeJS 开发的</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 简单配置</title>
    <link href="https://grit0821.github.io/Blog/2020/01/21/webpack-%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/"/>
    <id>https://grit0821.github.io/Blog/2020/01/21/webpack-%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</id>
    <published>2020-01-21T08:40:59.000Z</published>
    <updated>2020-01-21T08:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="单页应用"><a href="#单页应用" class="headerlink" title="单页应用"></a>单页应用</h1><p>单页，只有一个 index.html</p><p>src 文件下 index.js 引入了 a.js 模块，另外还有一个 b.js，将 index.js 和 a.js 作为入口打包成一个文件 build.js 引入页面内</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> path  = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [<span class="string">'./src/index.js'</span>, <span class="string">'./src/b.js'</span>],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'build.[hash:8].js'</span>,</span><br><span class="line">    path: path.resolve(<span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      hash: <span class="literal">true</span>, <span class="comment">// 引 js 的时候通过查询参数带 hash，用来清理缓存</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>entry 数组形式，两个入口</p><p>插件：</p><p>html-webpack-plugin：根据源文件中 html template 打包出一个 html ，自动引入打包的 js 文件</p><p>clean-webpack-plugin：output 的 filename 添加 [hash] 后，每次更新内容会产生新 hash 后缀，此插件会删除之前的打包文件，只保留有最新 hash 后缀的文件</p><h1 id="多页应用"><a href="#多页应用" class="headerlink" title="多页应用"></a>多页应用</h1><p>多页，设置两个 html ，index.html 使用 index.js ，main.html 使用 main.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> path  = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index_: <span class="string">'./src/index/index.js'</span>,</span><br><span class="line">    main_: <span class="string">'./src/main/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[hash:8].js'</span>, <span class="comment">//多页应用使用 [name]</span></span><br><span class="line">    path: path.resolve(<span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      template: <span class="string">'./src/index/index.html'</span>,</span><br><span class="line">      hash: <span class="literal">true</span>, <span class="comment">// 引 js 的时候通过查询参数带 hash，用来清理缓存</span></span><br><span class="line">      chunks: [<span class="string">'index_'</span>] <span class="comment">// 表示引入的 js 模块</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'main.html'</span>,</span><br><span class="line">      template: <span class="string">'./src/main/main.html'</span>,</span><br><span class="line">      hash: <span class="literal">true</span>, <span class="comment">// 引 js 的时候通过查询参数带 hash，用来清理缓存</span></span><br><span class="line">      chunks: [<span class="string">'main_'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>entry 使用对象形式 ，key 为 chunk name，value  为入口文件</p><p>output 多页需要输出多个打包  js 文件，filename 设置 <code>[name]</code>，引用 entry 设置的 chunk name，打包出两个 js 文件分别为 <code>index_.6798b082.js</code>和<code>main_.6798b082.js</code>(加 hash 后缀)</p><p>因为多页有两个 html，所以 plugins 数组中需要两个 HtmlWebpackPlugin 实例，chunks 值为数组，表示 html 引入的 chunk name</p><h1 id="热更新（以单页为例）"><a href="#热更新（以单页为例）" class="headerlink" title="热更新（以单页为例）"></a>热更新（以单页为例）</h1><p>热更新：不刷新页面，只更新修改的部分</p><p>为什么要使用热更新：性能优化，文件太多都刷新会浪费性能；vuex，redux状态管理刷新会丢失</p><p>单页，单入口</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> path  = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> Webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'build.[hash:8].js'</span>,</span><br><span class="line">    path: path.resolve(<span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 开启热更新，需要引入 webpack 自带的热更新插件 HotModuleReplacementPlugin</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      hash: <span class="literal">true</span>, <span class="comment">// 引 js 的时候通过查询参数带 hash，用来清理缓存</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> Webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>引入 webpack 自带热更新插件 HotModuleReplacementPlugin，devServer 设置 hot 为 true 开启热更新</p><p>对入口文件 index.js 监控热更新</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot)&#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="加载样式"><a href="#加载样式" class="headerlink" title="加载样式"></a>加载样式</h1><p>webpack 默认只能处理 js 模块，处理其他文件例如 css 、less需要 loader 加载</p><ul><li>style-loader：将样式文件变成 style 标签插入页面，</li><li>css-loader：把 css 变成 js 模块，默认支持热更新功能</li><li>less-loader ：加载 less</li></ul><p>要处理和引入样式文件，一定是因为入口文件引入了相关样式模块，例如入口文件 index.js 引入了 css 模块和 less 模块</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./style.less'</span></span><br></pre></td></tr></table></figure></div><h2 id="lt-style-gt-标签引入样式"><a href="#lt-style-gt-标签引入样式" class="headerlink" title="&lt;style&gt;标签引入样式"></a><code>&lt;style&gt;</code>标签引入样式</h2><p>将 css 文件和 less 文件处理，变成<code>&lt;style&gt;</code>标签插入<code>&lt;body&gt;</code>，打包后只有 build.js 文件，样式也被处理进去，因为有 css-loader ，支持热更新</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            use:[</span><br><span class="line">              &#123;<span class="attr">loader</span>: <span class="string">'style-loader'</span>&#125;,</span><br><span class="line">              &#123;<span class="attr">loader</span>: <span class="string">'css-loader'</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>, </span><br><span class="line">            use:[</span><br><span class="line">              &#123;<span class="attr">loader</span>: <span class="string">'style-loader'</span>&#125;,</span><br><span class="line">              &#123;<span class="attr">loader</span>: <span class="string">'css-loader'</span>&#125;,</span><br><span class="line">              &#123;<span class="attr">loader</span>: <span class="string">'less-loader'</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="抽离出-css-文件，link-引入样式"><a href="#抽离出-css-文件，link-引入样式" class="headerlink" title="抽离出 css 文件，link 引入样式"></a>抽离出 css 文件，link 引入样式</h2><p>如果只用 style-loader 加载样式，样式都会在打包的 js 文件中，文件会很大</p><p>可以使用  mini-css-extract-plugin 抽离样式到一个 css 文件，通过 link 引入</p><p>使用 postcss-loader 和 autoprofixer 插件给样式加浏览器兼容前缀</p><p>使用 copy-webpack-plugin :用来拷贝文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> Webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">let</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'build.[hash:8].js'</span>,</span><br><span class="line">    path: path.resolve(<span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 开启热更新，需要引入 webpack 自带的热更新插件 HotModuleReplacementPlugin</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="string">'./src/doc'</span>,</span><br><span class="line">        to: <span class="string">'public'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'./css/style.css'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      hash: <span class="literal">true</span>, <span class="comment">// 引 js 的时候通过查询参数带 hash，用来清理缓存</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> Webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则，为了匹配文件使用</span></span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'postcss-loader'</span> &#125;</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'postcss-loader'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'less-loader'</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>要给样式添加前缀还需要设置 postcss 的配置文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;单页应用&quot;&gt;&lt;a href=&quot;#单页应用&quot; class=&quot;headerlink&quot; title=&quot;单页应用&quot;&gt;&lt;/a&gt;单页应用&lt;/h1&gt;&lt;p&gt;单页，只有一个 index.ht</summary>
      
    
    
    
    <category term="工具使用" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    <category term="webpack" scheme="https://grit0821.github.io/Blog/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>CommonJS规范和ES6模块规范</title>
    <link href="https://grit0821.github.io/Blog/2020/01/21/CommonJS%E8%A7%84%E8%8C%83%E5%92%8CES6%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/"/>
    <id>https://grit0821.github.io/Blog/2020/01/21/CommonJS%E8%A7%84%E8%8C%83%E5%92%8CES6%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/</id>
    <published>2020-01-21T08:36:36.000Z</published>
    <updated>2020-02-05T16:26:02.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">-<h1 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h1><p>Node 应用由模块组成，采用 CommonJS 规范</p><p>导出模块采用<code>module.exports</code>,<code>module.exports</code>是一个对象，也是导出的接口</p><p>导入模块采用<code>require</code>引入这个对象</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> add3 = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> + value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="导出和引入-example-js-中的模块"><a href="#导出和引入-example-js-中的模块" class="headerlink" title="导出和引入 example.js 中的模块"></a>导出和引入 example.js 中的模块</h2><p>挂载 module.exports 对象上导出和引入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出1,分别导出</span></span><br><span class="line"><span class="built_in">module</span>.exports.x = x</span><br><span class="line"><span class="built_in">module</span>.exports.add3 = add3</span><br><span class="line"><span class="comment">// 导出2，对象解构赋值</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;x, add3&#125;</span><br><span class="line"><span class="comment">// 引入1，解构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123;x,add3&#125; = <span class="built_in">require</span>(<span class="string">'./example.js'</span>)</span><br><span class="line"><span class="comment">// 引入2，整个对象</span></span><br><span class="line"><span class="keyword">let</span> example = <span class="built_in">require</span>(<span class="string">'./example.js'</span>)</span><br><span class="line">example.add3(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div><p>只导出一个目标时，不使用对象形式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line">moduel.exports = add3</span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">let</span> add3 = <span class="built_in">require</span>(<span class="string">'./example.js'</span>)</span><br></pre></td></tr></table></figure></div><h1 id="ES6模块规范"><a href="#ES6模块规范" class="headerlink" title="ES6模块规范"></a>ES6模块规范</h1><p><code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于引入其他模块提供的功能。</p><h2 id="导出和引入-example-js-中的模块-1"><a href="#导出和引入-example-js-中的模块-1" class="headerlink" title="导出和引入 example.js 中的模块"></a>导出和引入 example.js 中的模块</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> add3 = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> + value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> &#123;x, add3&#125;</span><br><span class="line"><span class="comment">// 引入1,对象解构赋值</span></span><br><span class="line"><span class="keyword">import</span> &#123;x, add3&#125; <span class="keyword">from</span> <span class="string">'./example.js'</span></span><br><span class="line"><span class="comment">// 引入2，使用 * 指定一个对象，所有输出值都加载到这个对象上</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> example <span class="keyword">from</span> <span class="string">'./example.js'</span></span><br><span class="line">example.add3(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div><p>只导出一个目标时使用 export default</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> add3</span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> add3 <span class="keyword">from</span> <span class="string">'./example.js'</span></span><br></pre></td></tr></table></figure></div><h2 id="浏览器加载-ES6-模块"><a href="#浏览器加载-ES6-模块" class="headerlink" title="浏览器加载 ES6 模块"></a>浏览器加载 ES6 模块</h2><p>浏览器加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入<code>type=&quot;module&quot;</code>属性</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./test.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>上面代码在网页中插入一个模块<code>test.js</code>，由于 type 属性设置为 module，所以浏览器知道这是一个 ES6 模块</p><p>浏览器对于<code>type=module</code>的<code>&lt;script&gt;</code>，都是异步加载，相当于设置了<code>defer</code>属性，延迟脚本会等到整个页面渲染完再执行模块脚本，避免浏览器阻塞。</p><p>如果页面有多个<code>&lt;script type=&quot;module&quot;&gt;</code>，它们会按照在页面的顺序依次执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
-

&lt;h1 id=&quot;CommonJS规范&quot;&gt;&lt;a href=&quot;#CommonJS规范&quot; class=&quot;headerlink&quot; title=&quot;CommonJS规范&quot;&gt;&lt;/a&gt;CommonJS</summary>
      
    
    
    
    <category term="基础知识" scheme="https://grit0821.github.io/Blog/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
</feed>
