<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mvvm原理</title>
    <url>/Blog/2020/02/17/mvvm%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">
vue 是常见的 mvvm 框架，实现数据，视图双向绑定的原理主要是数据劫持结合发布-订阅模式，通过 Object.defineProperty 来劫持 data 各个的属性，属性初始化取值时添加订阅，属性取值变化时触发 setter 通知订阅触发回调更新视图

<p>下面根据 vue 的源码，实现简易版本的 mvvm，使用方式和 vue 一样，主要实现 v-model 命令和文本插值，使用方式如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"school.name"</span>&gt;</span></span><br><span class="line">    &#123;&#123;school.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;school.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;school.age&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"mvvm.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el:<span class="string">'#app'</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line">        school:&#123;</span><br><span class="line"><span class="actionscript">          name:<span class="string">'大连理工'</span>,</span></span><br><span class="line">          age: 70</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h1><a href="https://upload-images.jianshu.io/upload_images/12955144-8b6fadb33056e624.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="mvvm.png" class="fancybox"><img alt="mvvm.png" style="zoom:80%;" data-src="https://upload-images.jianshu.io/upload_images/12955144-8b6fadb33056e624.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload" title="mvvm.png"></a>

<p>整体思路如上图所示：</p>
<p>新建 mvvm 实例 是整个程序的入口，在新建过程中</p>
<p>首先用 Observer 劫持 data 所有属性：</p>
<ol>
<li>创建 Dep 实例 dep，Dep是用来收集订阅和通知订阅更新</li>
<li>创建 getter，若 Dep.target 存在，dep 添加订阅 watcher</li>
<li>创建 setter，如果触发 setter，通过 dep 通知 watcher 更新</li>
</ol>
<p>然后创建 Compiler 结合 data 进行模板编译：</p>
<ol>
<li><p>解析到编译的数据，每个数据创建watcher，在创建过程中：</p>
<p> Dep.target 指向创建的watcher，</p>
<p> 取值时触发 getter，给 dep 添加订阅 </p>
<p> Dep.target  = null 解除引用</p>
</li>
<li><p>根据 data 编译模板渲染到页面，初始化视图</p>
</li>
</ol>
<p>完成之后，数据变化 —— 触发 setter，setter 里调用 dep.notify() —— dep 通知所有订阅的 watcher 更新 —— 更新视图</p>
<h1 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h1><p><a href="https://github.com/Grit0821/mvvm" target="_blank" rel="noopener">github</a></p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>手写loader(5) less-loadr,css-loader和style-loader</title>
    <url>/Blog/2020/02/08/%E6%89%8B%E5%86%99loader-5-less-loadr-css-loader%E5%92%8Cstyle-loader/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>新建 index.less 文件，并在 index.js 中引入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">less</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@color:</span> blue;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">backgound</span>: url(<span class="string">'./public.jpg'</span>); <span class="comment">// 覆盖</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>配置 webpack loader</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.less$/</span>,</span><br><span class="line">        use:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h1><p>less-loader 用 less 编译 index.less，返回编译的 css 文件</p>
<p>首先安装 less <code>yarn add less</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// less.loader.js</span></span><br><span class="line"><span class="keyword">let</span> less = <span class="built_in">require</span>(<span class="string">'less'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> css</span><br><span class="line">  less.render(source,(err, result)=&gt;&#123; <span class="comment">// less转义器提供的写法</span></span><br><span class="line">    css = result.css</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> css</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div>

<h1 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h1><p>css-loader 对引入的其他模块进行解析</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// css.loader.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/url\((.+?)\)/g</span></span><br><span class="line">  <span class="keyword">let</span> pos = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> current</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">'let list = []'</span>]</span><br><span class="line">  <span class="keyword">while</span> (current = reg.exec(source)) &#123;</span><br><span class="line">    <span class="keyword">let</span> [matchUrl,g] = current <span class="comment">// url('./public.jpg'), './public.jpg'</span></span><br><span class="line">    <span class="comment">// console.log(matchUrl,g)</span></span><br><span class="line">    <span class="keyword">let</span> last = reg.lastIndex - matchUrl.length</span><br><span class="line">    arr.push(<span class="string">`list.push(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source.slice(pos, last))&#125;</span>)`</span>)</span><br><span class="line">    pos = reg.lastIndex</span><br><span class="line">    arr.push(<span class="string">`list.push('url('+require(<span class="subst">$&#123;g&#125;</span>)+')')`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  arr.push(<span class="string">`list.push(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source.slice(pos))&#125;</span>)`</span>)</span><br><span class="line">  arr.push(<span class="string">`module.exports = list.join('')`</span>)</span><br><span class="line">  <span class="comment">// console.log(arr.join('\r\n'))</span></span><br><span class="line">  <span class="keyword">return</span> arr.join(<span class="string">'\r\n'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div>

<p>css-loader 将 index.less 文件拆成了一个字符串，并且将 ur l这种引入方式做了些修改，变成 require 引入</p>
<h1 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 导出脚本</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">    let style = document.createElement('style')</span></span><br><span class="line"><span class="string">    style.innerHTML = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source)&#125;</span></span></span><br><span class="line"><span class="string">    document.head.appendChild(style)</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loader.pitch = <span class="function"><span class="keyword">function</span>(<span class="params">remainingRequest</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str =<span class="string">`</span></span><br><span class="line"><span class="string">    let style = document.createElement('style')</span></span><br><span class="line"><span class="string">    style.innerHTML = require(<span class="subst">$&#123;loaderUtils.stringifyRequest(<span class="keyword">this</span>,</span></span></span><br><span class="line"><span class="string"><span class="subst">      <span class="string">'!!'</span>+remainingRequest)&#125;</span>)</span></span><br><span class="line"><span class="string">    document.head.appendChild(style)</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div>

<p>style-loader 使用了 inline-loader 并设置了前缀 “!!”表示只使用 inline-loader，</p>
<p>remainingRequest 表示剩余的 loader 请求，此处就是 <code>D:\document\loader-webpack\loaders\css-loader.js!D:\document\loader-webpack\loaders\less-loader.js!D:\document\loader-webpack\src\index.less</code>是一个 inline-loader</p>
<p><code>loaderUtils.stringifyRequest(this, &#39;!!&#39;+remainingRequest)</code>将绝对路径转化为相对路径，即<code>&quot;!!../loaders/css-loader.js!../loaders/less-loader.js!./index.less&quot;</code></p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>手写loader</category>
      </categories>
  </entry>
  <entry>
    <title>手写loader(1) loader配置</title>
    <url>/Blog/2020/02/06/%E6%89%8B%E5%86%99loader-1-loader%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">
-

<h1 id="什么是-loader"><a href="#什么是-loader" class="headerlink" title="什么是 loader"></a>什么是 loader</h1><p>webpack 只能处理 js 模块，如果要处理其他类型的文件，需要使用 loader 进行转换；loader 指用来将一段代码转换成另一段代码的 webpack 加载器，loader 只是一个导出为函数的 JavaScript 模块</p>
<h1 id="写一个简单的-loader"><a href="#写一个简单的-loader" class="headerlink" title="写一个简单的 loader"></a>写一个简单的 loader</h1><p>loader 就是一个函数，接收源码返回处理后的代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// loaders/loader1.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> source</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div>

<h1 id="loader-的载入方式"><a href="#loader-的载入方式" class="headerlink" title="loader 的载入方式"></a>loader 的载入方式</h1><h2 id="直接写成绝对路径"><a href="#直接写成绝对路径" class="headerlink" title="直接写成绝对路径"></a>直接写成绝对路径</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      use: path.resolve(<span class="string">'loaders'</span>,<span class="string">'loader1'</span>)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="配置-resolveLoader-的-alias-别名"><a href="#配置-resolveLoader-的-alias-别名" class="headerlink" title="配置 resolveLoader 的 alias (别名)"></a>配置 resolveLoader 的 alias (别名)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader:&#123;</span><br><span class="line">    alias:&#123;</span><br><span class="line">      loader1: path.resolve(<span class="string">'loaders'</span>,<span class="string">'loader1'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      use: <span class="string">'loader1'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="配置-resolveLoader-的-modules"><a href="#配置-resolveLoader-的-modules" class="headerlink" title="配置 resolveLoader 的 modules"></a>配置 resolveLoader 的 modules</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader:&#123;</span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      use: <span class="string">'loader1'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>modules: [&#39;node_modules&#39;, path.resolve(&#39;loaders&#39;)]</code>表示先去 node_modules 目录寻找，然后再去根目录下的 loaders 目录寻找</p>
<h1 id="配置多个loader"><a href="#配置多个loader" class="headerlink" title="配置多个loader"></a>配置多个loader</h1><p><code>use:[loader1, loader2, loader3]</code>，loader 执行顺序倒叙：3 - 2 - 1</p>
<h1 id="loader-的分类"><a href="#loader-的分类" class="headerlink" title="loader 的分类"></a>loader 的分类</h1><p>pre 在前面，normal 在中间，post 在后面；通过<code>enforce: &#39;pre&#39;</code>设置，还有一种特殊的 inline-loader</p>
<p>确定分类的 loader 顺序： pre - normal - inline - post，</p>
<h2 id="inline-loader"><a href="#inline-loader" class="headerlink" title="inline-loader"></a>inline-loader</h2><p>inline-loader 是一类特殊的 loader，不通过 webpack.config.js 设置，在引入模块的时候指明使用，inline-loader 多出现于 loader 内部，比如 style-loader 会在自身代码里引入 css-loader</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js use['loader3','loader2','loader1']</span></span><br><span class="line"><span class="keyword">let</span> str <span class="built_in">require</span>(<span class="string">'inline-loader!a.js'</span>) <span class="comment">// 引入a.js时使用inline-loader</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行顺序</span></span><br><span class="line"><span class="comment">// loader1, loader2, loader3, loader1, loader2, inline-loader, loader3</span></span><br><span class="line"><span class="comment">// 前三个是处理index.js，后面四个是处理引入a.js</span></span><br></pre></td></tr></table></figure></div>

<p>但是当某个文件想特殊处理，比如上边的 a.js，不想让它用 webpack 配置的 pre 和 normal loader，而只使用 inline-loader，可以设置前缀进行配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// “-!”,不会让文件再去通过pre+normal loader来处理了</span></span><br><span class="line"><span class="comment">// “!”, 不使用normal-loader</span></span><br><span class="line"><span class="comment">// “!!”，什么都不要，只使用这个inline loader</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="built_in">require</span>(<span class="string">"!!inline-loader!./a.js"</span>);</span><br></pre></td></tr></table></figure></div>

<h1 id="loader的组成"><a href="#loader的组成" class="headerlink" title="loader的组成"></a>loader的组成</h1><p>每个 loader 都由两部分组成：pitchLoader 和 normalLoader（都是 loader 上挂的方法）；pitch 和 normal 的执行顺序相反，当 pitch 没有定义或者没有返回值时，会依次执行 pitch 再获取资源，执行 loader；如果定义的某个 pitch 有返回值则会跳过读取资源和自己的 loader</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> source</span><br><span class="line">&#125;</span><br><span class="line">loader.pitch = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">loader.normal = funciton()&#123;&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div>

<p>pitchLoader 无返回值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">use:['loader3','loader2','loader1']</span><br><span class="line">pitch 无返回值</span><br><span class="line"></span><br><span class="line">pitch:   loader3 -&gt; loader2 -&gt; loader1 </span><br><span class="line"><span class="code">                                        \</span></span><br><span class="line"><span class="code">                                         resource</span></span><br><span class="line"><span class="code">                                        /</span></span><br><span class="line">normal:  loader3 <span class="xml"><span class="tag">&lt;<span class="name">-</span> <span class="attr">loader2</span> &lt;<span class="attr">-</span> <span class="attr">loader1</span></span></span></span><br></pre></td></tr></table></figure></div>

<p>pitchLoader 有返回值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">use:['loader3','loader2','loader1']</span><br><span class="line">pitch 有返回值</span><br><span class="line"></span><br><span class="line">pitch:   loader3 -&gt; loader2    loader1 </span><br><span class="line"><span class="code">                  /               </span></span><br><span class="line"><span class="code">              有返回值                  resource</span></span><br><span class="line"><span class="code">                /                       </span></span><br><span class="line">normal:  loader3    loader2     loader1</span><br></pre></td></tr></table></figure></div>

<h1 id="loader-的特点"><a href="#loader-的特点" class="headerlink" title="loader 的特点"></a>loader 的特点</h1><ol>
<li>第一个 loader（执行顺序的最后一个）要返回 js</li>
<li>每个 loader 只做一件内容，为了使 loader 在更多场景下链式调用</li>
<li>每个 loader 都是一个模块</li>
<li>每个 loader 都是无状态的，确保 loader 在不同模块转换之间不保存状态</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5da59058f265da5b8072ea22#heading-0" target="_blank" rel="noopener">webpack loader</a></p>
<p><a href="https://www.jianshu.com/p/c7ba57161c6c" target="_blank" rel="noopener">什么是loader</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>手写loader</category>
      </categories>
  </entry>
  <entry>
    <title>手写loader(2) babel-loader实现</title>
    <url>/Blog/2020/02/06/%E6%89%8B%E5%86%99loader-2-babel-loader%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>babel-loader 用来加载 js 代码并进行转译</p>
<h1 id="配置-babel-loader"><a href="#配置-babel-loader" class="headerlink" title="配置 babel-loader"></a>配置 babel-loader</h1><p>首先安装 babel 和 babel 的相关模块</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add @babel/core @babel/p<span class="built_in">reset-env</span> <span class="literal">-D</span></span><br></pre></td></tr></table></figure></div>

<p>@babel/core 是 babel 的核心模块，编译器，用来转译代码</p>
<p>@babel/preset-env 是 babel 转译代码的预设规则</p>
<p>然后设置加载 babel-loader 的方式 </p>
<p>在文件根目录下新建一个文件夹 loaders 用来存放 babel-loader.js</p>
<p>设置加载 loader 的方式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">    modules:[<span class="string">'node_modules'</span>,path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'source-map'</span>, <span class="comment">// 开启源码映射</span></span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options:&#123;</span><br><span class="line">            presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>设置在使用 loader 的时候先去 node_modules 目录下查找，然后再去 loaders 目录查找</p>
<h1 id="实现-babel-loader"><a href="#实现-babel-loader" class="headerlink" title="实现 babel-loader"></a>实现 babel-loader</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// babel-loader.js</span></span><br><span class="line"><span class="keyword">let</span> babel = <span class="built_in">require</span>(<span class="string">'@babel/core'</span>)</span><br><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>) <span class="comment">// loader的工具库</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123; <span class="comment">// this表示loader上下文; source表示源码</span></span><br><span class="line">  <span class="keyword">let</span> options = loaderUtils.getOptions(<span class="keyword">this</span>) <span class="comment">//获取loader的options</span></span><br><span class="line">  <span class="keyword">let</span> cb = <span class="keyword">this</span>.async()</span><br><span class="line">  babel.transform(source, &#123; <span class="comment">// 用babel转译源码</span></span><br><span class="line">    ...options , <span class="comment">// 展开对象</span></span><br><span class="line">    sourceMap: <span class="literal">true</span>, <span class="comment">// 源码映射，webpack同时配置devtool属性</span></span><br><span class="line">    <span class="comment">// 设置源码映射的文件名index.js</span></span><br><span class="line">    filename: <span class="keyword">this</span>.resourcePath.split(<span class="string">'/'</span>).pop() </span><br><span class="line">    <span class="comment">// this.resourcePath表示源码的绝对路径</span></span><br><span class="line">    <span class="comment">// "D:\document\loader-webpack\src\index.js"</span></span><br><span class="line">  &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span>&#123;<span class="comment">// 异步回调导出转译结果</span></span><br><span class="line">    cb(err, result.code, result.map)  </span><br><span class="line">  &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div>

<p><code>let cb = this.async()</code> 是 loader 的原生导出函数，如果是同步，那么loader中会自动调用这个函数，异步的话，需要自己手动调用</p>
<p>打包后的结果：实现了源码映射</p>
<a href="https://upload-images.jianshu.io/upload_images/12955144-aedfd99f29118ac0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="undefined" class="fancybox"><img height="80%" width="80%" data-src="https://upload-images.jianshu.io/upload_images/12955144-aedfd99f29118ac0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></a>]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>手写loader</category>
      </categories>
  </entry>
  <entry>
    <title>手写 loader(3) bannder-loader添加时间戳</title>
    <url>/Blog/2020/02/06/%E6%89%8B%E5%86%99-loader-3-bannder-loader%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>banner-loader 可以在打包的代码前添加相关的注释信息</p>
<h1 id="配置-banner-loader"><a href="#配置-banner-loader" class="headerlink" title="配置 banner-loader"></a>配置 banner-loader</h1><p>利用 banner-loader 在打包的代码前添加时间戳</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'source-map'</span>,</span><br><span class="line">  watch: <span class="literal">true</span>, <span class="comment">// 开启实时监控打包</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'banner-loader'</span>,</span><br><span class="line">          options:&#123;</span><br><span class="line">            text: <span class="string">'2020/02/'</span>,</span><br><span class="line">            filename: path.resolve(__dirname,<span class="string">'banner.js'</span>) </span><br><span class="line">            <span class="comment">// 优先解析filename表示的banner.js文件，没有再使用text字段</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// banner.js</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().toString()</span><br></pre></td></tr></table></figure></div>

<h1 id="实现-banner-loader"><a href="#实现-banner-loader" class="headerlink" title="实现 banner-loader"></a>实现 banner-loader</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// banner-loader.js</span></span><br><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="keyword">let</span> validateOptions = <span class="built_in">require</span>(<span class="string">'schema-utils'</span>)</span><br><span class="line"><span class="comment">// schema-utils用来检验使用loader时，传递的options格式是否正确</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = loaderUtils.getOptions(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">let</span> cb = <span class="keyword">this</span>.async()</span><br><span class="line">  <span class="keyword">let</span> schema = &#123; <span class="comment">// 检验规则</span></span><br><span class="line">    type: <span class="string">'object'</span>,</span><br><span class="line">    properties:&#123;</span><br><span class="line">      text: &#123;<span class="attr">type</span>: <span class="string">'string'</span>&#125;,</span><br><span class="line">      filename: &#123;<span class="attr">type</span>: <span class="string">'string'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  validateOptions(schema, options, <span class="string">'banner-loader'</span>)</span><br><span class="line">  <span class="comment">// 用schema规则检验loader的optioins，如果报错，提示'banner-loader'</span></span><br><span class="line">  <span class="keyword">if</span>(options.filename)&#123; <span class="comment">// 优先解析banner.js</span></span><br><span class="line">    <span class="keyword">this</span>.addDependency(options.filename) </span><br><span class="line">    <span class="comment">// 给banner-loader添加依赖，webpack同时设置watch:true</span></span><br><span class="line">    <span class="comment">// 监控banner.js更新就会重新打包</span></span><br><span class="line">    fs.readFile(options.filename,<span class="string">'utf8'</span>,(err, data)=&gt;&#123;</span><br><span class="line">      cb(err,<span class="string">`/*<span class="subst">$&#123;<span class="built_in">eval</span>(data)&#125;</span>*/<span class="subst">$&#123;source&#125;</span>`</span>)</span><br><span class="line">      <span class="comment">// 模板字符串，eval执行banner.js</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="string">`/*<span class="subst">$&#123;options.text&#125;</span>*/<span class="subst">$&#123;source&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>手写loader</category>
      </categories>
  </entry>
  <entry>
    <title>手写loader(4) file-loader和url-loader</title>
    <url>/Blog/2020/02/06/%E6%89%8B%E5%86%99loader-4-file-loader%E5%92%8Curl-loader/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h1><p>file-loader 主要用来加载图片文件</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> p <span class="keyword">from</span> <span class="string">'./public.jpg'</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = p</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img)</span><br></pre></td></tr></table></figure></div>

<h2 id="配置-file-loader"><a href="#配置-file-loader" class="headerlink" title="配置 file-loader"></a>配置 file-loader</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123; <span class="comment">// 解析loader的方式</span></span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  rules:[</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.jpg$/</span>,</span><br><span class="line">      use:<span class="string">'file-loader'</span> </span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="实现-file-loader"><a href="#实现-file-loader" class="headerlink" title="实现 file-loader"></a>实现 file-loader</h2><p>file-loader 的原理：</p>
<p>将读出来的文件写到dist目录中，同时文件名是根据读到的二进制文件以MD5的形式生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file-loader.js</span></span><br><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> filename = loaderUtils.interpolateName(<span class="keyword">this</span>, <span class="string">'[hash:8].[ext]'</span>,</span><br><span class="line">                                             &#123;<span class="attr">content</span>:source&#125;)</span><br><span class="line">  <span class="keyword">this</span>.emitFile(filename, source) <span class="comment">// 发射图片文件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`module.exports="<span class="subst">$&#123;filename&#125;</span>"`</span><span class="comment">// file-loader返回一个路径</span></span><br><span class="line">&#125;</span><br><span class="line">loader.raw = <span class="literal">true</span> <span class="comment">// source源文件二进制读取</span></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div>

<h1 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h1><p>url-loader 会将引入的文件以 base64 格式编码，生成 DataURL，再把这个字符串打包到 JavaScript</p>
<p>url-loader 限制文件大小，超过大小时会使用 file-loader 处理</p>
<h2 id="配置-url-loader"><a href="#配置-url-loader" class="headerlink" title="配置 url-loader"></a>配置 url-loader</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123; <span class="comment">// 解析loader的方式</span></span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, path.resolve(<span class="string">'loaders'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  rules:[</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.jpg$/</span>,</span><br><span class="line">      use:&#123;</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options:&#123;</span><br><span class="line">          limit: <span class="number">200</span>*<span class="number">1024</span> <span class="comment">// 文件限制200k</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;     </span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="实现-url-loader"><a href="#实现-url-loader" class="headerlink" title="实现 url-loader"></a>实现 url-loader</h2><p>获取限制文件大小 limit，超过文件大小返回 base64 格式，否则返回 file-loader 的处理结果</p>
<p>base64 格式：<code>data:image/jpg;base64,...</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url-loader.js</span></span><br><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="keyword">let</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>)  <span class="comment">// 此模块可以拿到文件类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;limit&#125; = loaderUtils.getOptions(<span class="keyword">this</span>) <span class="comment">// 获取loader limit限制</span></span><br><span class="line">  <span class="keyword">if</span>(limit &amp;&amp; limit&gt;source.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`module.exports = "data:<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">      mime.getType(<span class="keyword">this</span>.resourcePath) <span class="regexp">//</span> 根据文件绝对路径获取类型</span></span></span><br><span class="line"><span class="string"><span class="subst">    &#125;</span>;base64,<span class="subst">$&#123;source.toString(<span class="string">"base64"</span>)&#125;</span>"`</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'./file-loader.js'</span>).call(<span class="keyword">this</span>, source)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">loader.raw = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 默认情况下，资源文件会被转化为 UTF-8 字符串，然后传给 loader。</span></span><br><span class="line"><span class="comment">// 通过设置 raw，loader 可以接收原始的 Buffer</span></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure></div>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5d904e135188255cd02a1e15" target="_blank" rel="noopener">webpack loaders 从上手到理解系列：file-loader</a></p>
<p><a href="https://juejin.im/post/5d90cb2c6fb9a04e31420541#heading-9" target="_blank" rel="noopener">webpack loader 从上手到理解系列：url-loader</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>手写loader</category>
      </categories>
  </entry>
  <entry>
    <title>webpack 性能优化（7）热更新</title>
    <url>/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%887%EF%BC%89%E7%83%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="热更新-HMR（Hot-Module-Replacement）"><a href="#热更新-HMR（Hot-Module-Replacement）" class="headerlink" title="热更新 HMR（Hot Module Replacement）"></a>热更新 HMR（Hot Module Replacement）</h1><p>热更新指对数据变化的部分进行局部跟新，而不进行页面刷新</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol>
<li><p>devServer 中设置 hot 属性 true</p>
</li>
<li><p>使用 webpack.HotModuleReplacementPlugin() 热更新插件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: ture, <span class="comment">// 开启热更新</span></span><br><span class="line">    contentBase: <span class="string">'./dist'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="comment">// 热更新插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改源文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js 引用 source.js</span></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'./resource.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot)&#123; <span class="comment">// 是否热更新</span></span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./resource.js'</span>, () =&gt; &#123; <span class="comment">//如果热更新了，在热更新完成后调用回调</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件更新了'</span>);</span><br><span class="line">    <span class="keyword">let</span> str = <span class="built_in">require</span>(<span class="string">'./resource.js'</span>); <span class="comment">// 不能使用import，因为import只能写在页面顶端</span></span><br><span class="line">    <span class="built_in">console</span>.log(str.default);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果只单纯的更新文件，上面可以简写为</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'./source'</span></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot)&#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>性能优化</category>
      </categories>
  </entry>
  <entry>
    <title>webpack 性能优化（6）懒加载</title>
    <url>/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%886%EF%BC%89%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h1><p>实现代码的按需加载</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>index.js 中点击 button ,动态加载 source.js 的内容，读取内容并打印</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">let</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>)</span><br><span class="line">button.innerHTML = <span class="string">'hello'</span></span><br><span class="line">button.addEventListener(<span class="string">'click'</span>,()=&gt;&#123;</span><br><span class="line">  <span class="comment">// es6 草案中的语法 jsonp实现动态加载文件</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./source.js'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.default)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(button)</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// source.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'wangyi'</span></span><br></pre></td></tr></table></figure></div>

<p>es6 import 可以实现按需加载，并返回一个 promise，回调中可以拿到加载的数据；vue , react 的懒加载也是这个原理</p>
<p>打包后生成 index.js 和 0.js（用来实现按需加载，JSONP 原理）</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>性能优化</category>
      </categories>
  </entry>
  <entry>
    <title>webpack 性能优化（5）抽离公共代码</title>
    <url>/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%885%EF%BC%89%E6%8A%BD%E7%A6%BB%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>多页应用一般会重复多次使用部分公共代码，这样每次加载单页的时候，就会重复去加载这些公共代码，会造成以下问题：</p>
<ol>
<li>相同资源重复被加载，浪费用户流量，增加服务器成本</li>
<li>每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验</li>
</ol>
<p>如果将这些公共代码抽取出来，并让浏览器缓存起来，用户在请求资源的时候，可以直接读取缓存中的这些代码，这样就能解决以上问题。</p>
<h1 id="抽离公共代码"><a href="#抽离公共代码" class="headerlink" title="抽离公共代码"></a>抽离公共代码</h1><p>入口文件有两个：index.js ，other.js；两者都引用了 a.js 和 b.js，可以将 a 和 b 抽离出来打包成 common.js，然后让 index.js 和 other.js 直接引用 common.js 即可</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    splitChunks: &#123; <span class="comment">// 分割代码块</span></span><br><span class="line">      cacheGroups: &#123; <span class="comment">// 缓存组</span></span><br><span class="line">        common: &#123; <span class="comment">// 公共的模块</span></span><br><span class="line">          chunks: <span class="string">'initial'</span>, <span class="comment">// 刚开始就要抽离</span></span><br><span class="line">          minSize: <span class="number">0</span>, <span class="comment">// 大于0字节抽离</span></span><br><span class="line">          minChunks: <span class="number">2</span> <span class="comment">// 重复使用2次抽离</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样就能够在一开始就将大于0字节的，并且使用2次以上的代码抽离出来，npm run build  得到的文件为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dist</span><br><span class="line">|</span><br><span class="line">. -- index.html</span><br><span class="line">|</span><br><span class="line">. -- commom~index~other.js</span><br><span class="line">|</span><br><span class="line">. -- index.js</span><br><span class="line">|</span><br><span class="line">. -- other.js</span><br></pre></td></tr></table></figure></div>

<p>index.js 和 other.js 都使用了抽离出来的公共代码 commom<del>index</del>other.js </p>
<h1 id="抽离公共第三方库"><a href="#抽离公共第三方库" class="headerlink" title="抽离公共第三方库"></a>抽离公共第三方库</h1><p>在上面的基础上，index.js 和 other.js 都引用了 jquery 库，配置 cacheGroups 的 vendor 属性抽离第三方库</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    splitChunks:&#123; <span class="comment">// 分割代码</span></span><br><span class="line">      cacheGroups:&#123; <span class="comment">// 缓存组</span></span><br><span class="line">        common:&#123; <span class="comment">// 公共的模块</span></span><br><span class="line">          chunks:<span class="string">'initial'</span>,</span><br><span class="line">          minSize:<span class="number">0</span>,</span><br><span class="line">          minChunks:<span class="number">2</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        vendor:&#123;	</span><br><span class="line">          test:<span class="regexp">/node_modules/</span>, <span class="comment">// 把此目录下符合条件的库抽离出来</span></span><br><span class="line">          chunks:<span class="string">'initial'</span>, <span class="comment">// 刚开始就要抽离</span></span><br><span class="line">          minSize:<span class="number">0</span>, <span class="comment">// 大小大于0字节的时候需要抽离出来</span></span><br><span class="line">          minChunks:<span class="number">2</span>, <span class="comment">// 重复2次使用的时候需要抽离出来</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是这样配置，common 会优先 vendor 抽离，jquery 会被当作普通公共模块和 a.js ，b.js 一起抽离到  commom<del>index</del>other.js 中；后面的 vendor 属性就没用了，</p>
<p>为了将第三方公共模块单独抽离出来，方便其他文件使用，给 vendor 添加优先级属性 priority，设置先抽离第三方公共模块再抽离普通模块</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    splitChunks:&#123; <span class="comment">// 分割代码</span></span><br><span class="line">      cacheGroups:&#123; <span class="comment">// 缓存组</span></span><br><span class="line">        common:&#123; <span class="comment">// 公共的模块</span></span><br><span class="line">          chunks:<span class="string">'initial'</span>,</span><br><span class="line">          minSize:<span class="number">0</span>,</span><br><span class="line">          minChunks:<span class="number">2</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        vendor:&#123;	</span><br><span class="line">          priority: <span class="number">1</span>,  <span class="comment">// 添加优先级</span></span><br><span class="line">          test:<span class="regexp">/node_modules/</span>, <span class="comment">// 把此目录下符合条件的库抽离出来</span></span><br><span class="line">          chunks:<span class="string">'initial'</span>, <span class="comment">// 刚开始就要抽离</span></span><br><span class="line">          minSize:<span class="number">0</span>, <span class="comment">// 大小大于0字节的时候需要抽离出来</span></span><br><span class="line">          minChunks:<span class="number">2</span>, <span class="comment">// 重复2次使用的时候需要抽离出来</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>打包得到的文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dist</span><br><span class="line">|</span><br><span class="line">. -- index.html</span><br><span class="line">|</span><br><span class="line">. -- commom~index~other.js</span><br><span class="line">|</span><br><span class="line">. -- index.js</span><br><span class="line">|</span><br><span class="line">. -- other.js</span><br><span class="line">|</span><br><span class="line">. -- vendor~index~other.js</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>性能优化</category>
      </categories>
  </entry>
  <entry>
    <title>webpak 性能优化（4）tree-shanking&amp;scope-hostig</title>
    <url>/Blog/2020/02/04/webpak-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%884%EF%BC%89tree-shanking-scope-hostig/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>两个webpack自带的优化：tree-shaking 和 scope-hosting 都是在生产（production）模式下</p>
<h1 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree-shaking"></a>tree-shaking</h1><p>在 mode: production 下，使用 import 引入模块，打包时会忽略模块中没有使用的代码</p>
<p>举例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + <span class="string">'sum'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> minus = <span class="function">(<span class="params">a, b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b+<span class="string">'minus'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;sum, minus&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> calc <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(calc.sum(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure></div>

<p>index.js 只使用了 test.js 中的 sum 方法；在开发模式下打包，sum 和 minus 都会被打包，在生产模式下，只打包 sum</p>
<p>如果使用 require 加载，sum 和 minus 都会打包</p>
<h1 id="scope-hosting-变量提升"><a href="#scope-hosting-变量提升" class="headerlink" title="scope-hosting 变量提升"></a>scope-hosting 变量提升</h1><p>在生产环境下可以提升作用域</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> d = a + b + c;</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure></div>

<p>webpack在生产环境下打包的时候，会直接将 d 打包成 a+b+c 的结果，无需声明多个变量再去相加</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>性能优化</category>
      </categories>
  </entry>
  <entry>
    <title>webpack 性能优化（3）happypack多线程打包</title>
    <url>/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%883%EF%BC%89happypack%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>使用 happypack 模块进行多线程打包，适用于文件较大的情况，本身启动多线程需要耗费时间</p>
<p>安装 happypack </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add happypack <span class="literal">-D</span></span><br></pre></td></tr></table></figure></div>

<p>修改配置文件，实现多线程打包 js 和 css</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="comment">// 多线程打包</span></span><br><span class="line"><span class="keyword">let</span> Happypack = <span class="built_in">require</span>(<span class="string">'happypack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(<span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    contentBase: <span class="string">'./dist'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    noParse: <span class="regexp">/jquery/</span>, <span class="comment">// jquery 独立的库，没有依赖，不去解析</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, <span class="comment">// \代表转义</span></span><br><span class="line">        include: path.resolve(<span class="string">'src'</span>), <span class="comment">// </span></span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: <span class="string">'Happypack/loader?id=js'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: <span class="string">'Happypack/loader?id=css'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./public/index.html'</span>,</span><br><span class="line"></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/\.\/locale/</span>, /moment/),</span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: path.resolve(__dirname, <span class="string">'dist'</span>, <span class="string">'manifest.json'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> Happypack(&#123;</span><br><span class="line">      id: <span class="string">'js'</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">'@babel/preset-env'</span>, <span class="string">'@babel/preset-react'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> Happypack(&#123;</span><br><span class="line">      id: <span class="string">'css'</span>,</span><br><span class="line">      use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>use: &#39;Happypack/loader?id=js&#39;</code>，表示使用 <code>id:&#39;js&#39;</code>的 happypack 实例进行打包</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>性能优化</category>
      </categories>
  </entry>
  <entry>
    <title>webpack 性能优化（2）DllPlugin&amp;DllReferencePlugin</title>
    <url>/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%882%EF%BC%89DllPlugin-DllReferencePlugin/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="场景需求"><a href="#场景需求" class="headerlink" title="场景需求"></a>场景需求</h1><p>在打包一个 react 的项目的时候，会把 react 和 react-dom 这两个库打包进来。这两个库很大且基本不会变，所以如果每次打包都要打包这两个第三方包的话，浪费时间，消耗性能</p>
<p>所以可以将 react 和 react-dom 单独打包好，然后动态链接引入即可。第二次打包时，发现react和react-dom已经被打包好了，那么就不需要再打包了，这样就大大提升了性能</p>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>在 src 下新建 test.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'wangyi'</span></span><br></pre></td></tr></table></figure></div>

<p>创建 webpack.config.react.js 用来打包 test.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  webpack.config.react.js </span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode:<span class="string">'development'</span>,</span><br><span class="line">  entry:&#123;</span><br><span class="line">    test:<span class="string">'./src/test.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:<span class="string">'[name].js'</span>,</span><br><span class="line">    path:path.resolve(__dirname,<span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用上面的配置文件执行 webpack</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npx webpack -<span class="literal">-config</span> webpack.config.react.js</span><br></pre></td></tr></table></figure></div>

<p>打包得到 /dist/test.js 里面是一个立即执行函数表达式，返回 module.exports 的 ‘wangyi’</p>
<p>为了使用一个变量去接收导出的值，可以修改配置文件的 output 属性</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  webpack.config.react.js </span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode:<span class="string">'development'</span>,</span><br><span class="line">  entry:&#123;</span><br><span class="line">    test:<span class="string">'./src/test.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:<span class="string">'[name].js'</span>,</span><br><span class="line">    path:path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">    library:<span class="string">'a'</span>,<span class="comment">//这样打包后的结果就被变量a接收</span></span><br><span class="line">    libraryTarget:<span class="string">'var'</span>,<span class="comment">//commonjs、umd、var、this等等，默认var，这样就相当于var a = 打包后的结果</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="实际使用-react-为例"><a href="#实际使用-react-为例" class="headerlink" title="实际使用(react 为例)"></a>实际使用(react 为例)</h1><p>第三方包 react ，react-dom 也可以像 test.js 提前打包好，用一个变量去接收，使用的时候直接引入已经打包好的动态链接库</p>
<p>打包使用的配置文件 webpack.config.react.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  webpack.config.react.js </span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    react: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'_dll_[name].js'</span>, <span class="comment">// 生成 _dll_react.js</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    library: <span class="string">'_dll_[name]'</span>,</span><br><span class="line">    <span class="comment">//  libraryTarget: 'var'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="string">'_dll_[name]'</span>,<span class="comment">//这个name要与output中的library同名</span></span><br><span class="line">      path: path.resolve(__dirname, <span class="string">'dist'</span>, <span class="string">'manifest.json'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>打包时使用 webpack 内置插件 DllPlugin 根据之前打包的结果生成动态链接库的清单 manifest.json，每次打包时会先去查找下清单里是否已经存在这个依赖，如果已经存在，则不打包，如果还没存在，则需要打包</p>
<p>运行<code>npx webpack --config webpack.config.react.js</code> ，得到打包j结果 _dll_react.js 动态链接库文件和 manifest.json 清单</p>
<p>为了使用动态链接库，在 src 下的 index.html 引入 _dll_react.js ，路径<code>/</code>表示根目录，打包后的’dist/index.html’ 正好可以引用，也可使用当前路径 <code>./</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/_dll_react.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 表示根目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>现在引入 react，react-dom 等第三方库的时候，首先查找是否在 manifest 清单中，不在清单中会打包，在清单中不打包，直接使用 html 引入的动态链接库；判断是否在清单中需要在打包时使用 DllReferencePlugin</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: path.resolve(__dirname, <span class="string">'dist'</span>, <span class="string">'manifest.json'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样再打包时，react，react-dom不再打包了，直接使用第一次打包生成的动态链接库，文件小很多 </p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>性能优化</category>
      </categories>
  </entry>
  <entry>
    <title>webpack 性能优化（1）</title>
    <url>/Blog/2020/02/04/webpack-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">
-

<h1 id="noParse-不解析没有依赖的库"><a href="#noParse-不解析没有依赖的库" class="headerlink" title="noParse 不解析没有依赖的库"></a>noParse 不解析没有依赖的库</h1><p>module 的 noParse 选项可以指定模块不进行依赖库的解析，直接进引入，加快打包速度；适用于引入一些没有依赖的独立的第三方库（例如 jquery）</p>
<p>正常引用 jquery <code>import jq from jquery</code> 时，会解析 jquery 库有没有依赖的包；设置 noParse 属性后，忽略解析，直接打包</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    noParse: <span class="regexp">/jquery/</span>, <span class="comment">// jquery中没有依赖，所有不用解析</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="loader-解析时排除和指定目录"><a href="#loader-解析时排除和指定目录" class="headerlink" title="loader 解析时排除和指定目录"></a>loader 解析时排除和指定目录</h1><p>解析文件时，例如所有 js 文件，会默认查找 /node_modules/ 目录，exclude 选项可以排除查找目录；include 选项可以指定查找目录；两者使用一个即可，都可以缩小解析范围</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    noParse: <span class="regexp">/jquery/</span>, <span class="comment">// jquery 独立的库，没有依赖，不去解析</span></span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        include: path.resolve(<span class="string">'src'</span>), <span class="comment">// 只去src目录查找</span></span><br><span class="line">        <span class="comment">// exclude: /node_modules/, // 忽略node_modules目录</span></span><br><span class="line">        use:&#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options:&#123;</span><br><span class="line">            presets:[<span class="string">'@babel/preset-env'</span>,<span class="string">'@babel/preset-react'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="webpack-IgnorePlugin-忽略第三方包的指定目录"><a href="#webpack-IgnorePlugin-忽略第三方包的指定目录" class="headerlink" title="webpack IgnorePlugin 忽略第三方包的指定目录"></a>webpack IgnorePlugin 忽略第三方包的指定目录</h1><p>IgnorePlugin 是 webpack 自带插件，作用是打包时忽略第三方包的指定目录</p>
<p>例如：安装引入 moment 包，这个库主要用来对时间进行格式化处理，支持多个语言</p>
<p>引入 moment 并使用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置语言</span></span><br><span class="line">moment.locale(<span class="string">'zh-cn'</span>)</span><br><span class="line"><span class="keyword">let</span> r = moment().endOf(<span class="string">'day'</span>).fromNow()</span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br></pre></td></tr></table></figure></div>

<p>此时引入了整个 moment 模块，虽然实际只使用了中文模块 <code>moment/locale/zh-cn</code>，但 <code>moment/locale/</code>下的所有语言模块也都打包进去了</p>
<p>使用 webpack.IgnorePlugin，设置在引入 moment 模块时，忽略 moment 下<code>./loacle</code>目录下的子模块</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	plugins:[</span><br><span class="line">    <span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/\.\/locale/</span>,/moment/)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面这样设置后，就无法使用所有的语言模块了，为了使用中文模块需要手动引入；这样既实现了功能，由减少了打包体积</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span><br><span class="line"><span class="comment">// 引入中文模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/zh-cn'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置语言</span></span><br><span class="line">moment.locale(<span class="string">'zh-cn'</span>)</span><br><span class="line"><span class="keyword">let</span> r = moment().endOf(<span class="string">'day'</span>).fromNow()</span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
        <category>性能优化</category>
      </categories>
  </entry>
  <entry>
    <title>webpack 解决跨域问题</title>
    <url>/Blog/2020/02/01/webpack-%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>跨域问题基于浏览器的同源策略，即协议，域名，端口都一致浏览器才能发送请求，<strong>而服务端发送请求没有跨域的问题</strong></p>
<p>使用 webpack 进行开发解决跨域问题主要有以下方法：</p>
<h1 id="通过配置服务器代理"><a href="#通过配置服务器代理" class="headerlink" title="通过配置服务器代理"></a>通过配置服务器代理</h1><p>不能操控后端代码时（比如前后端联调）可用</p>
<p>在配置文件 webpack.config.js 中添加  devServer 配置，然后配置它的 proxy 属性，webpack-dev-server 在起服务后，会把匹配的本地请求转到  proxy 里配置的服务器上去请求，通过服务端的转发，实现跨域</p>
<p>例如：</p>
<ul>
<li>前端服务端口（dev-server）8080</li>
<li>联调的后端端口：3000</li>
</ul>
<p>如果在前端发送请求<code>xhr.open(&#39;GET&#39;, &#39;/api/user&#39;)</code>实际上完整的请求 url 是 <code>http://localhost:8080/api/user</code>，直接请求报错，因为前端服务端口没有这个接口</p>
<p>现在给 devServer 配置 proxy</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  proxy: &#123;<span class="string">'api'</span>:<span class="string">'http://localhost:3000'</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过 webpack-dev-server 起服务器， 在遇到 /api/user 这种以 /api 开头的请求的时候，它不再往本地 <code>localhost:8080</code>发了，而是向对应的<code>http://localhost:3000</code>发请求。这是一种后端而非浏览器的的请求转发，有跨域问题。这个时候，虽然在浏览器查看前端发的请求地址是<code>http://localhost:8080/api/user</code>，但其实它的背后真正获取响应的请求是<code>http://localhost:3000/api/user</code></p>
<p>实际后端接口没有类似 api 这种统一前缀，为了方便配置，proxy 提供了 pathRewrite参数改写请求路径</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">	proxy: &#123;</span><br><span class="line">		<span class="string">'/api'</span>: &#123;</span><br><span class="line">			target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">			pathRewrite: &#123;</span><br><span class="line">				<span class="string">'/api'</span>: <span class="string">''</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>此时前端发送请求<code>xhr.open(&#39;GET&#39;,&#39;/api/user&#39;)</code></p>
<p>前端请求的完整 url <code>http://localhost:3000/api/user</code></p>
<p>经过代理后最终请求 url <code>http://localhost:3000/user</code></p>
<h1 id="在-dev-server-内-mock-数据"><a href="#在-dev-server-内-mock-数据" class="headerlink" title="在 dev-server 内 mock 数据"></a>在 dev-server 内 mock 数据</h1><p>直接使用 webapck-dev-server mock 数据，mock 接口和前端符合同源策略</p>
<p>webpack-dev-server 内部其实是自己起了一个express来做服务</p>
<p>webpack 的 devServer 配置提供了一个<code>before</code>方法，在启动服务之前，这个方法会被执行，我们可以把我们 mock 数据的逻辑写在这里</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  before(app)&#123; </span><br><span class="line">    app.get(<span class="string">'/api/user'</span>,(req, res)=&gt;&#123;</span><br><span class="line">      res.json(&#123;<span class="attr">name</span>: <span class="string">'wangyi'</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>before 方法会传一个参数 app 供我们使用，这个参数就是 webpack-dev-server 内部起的express对象</p>
<h1 id="在服务端启动-webpack"><a href="#在服务端启动-webpack" class="headerlink" title="在服务端启动 webpack"></a>在服务端启动 webpack</h1><p>提供接口的服务端代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/user'</span>,(req, res)=&gt;&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">name</span>: <span class="string">'webpack wangyi123'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></div>

<p>把 webpack 构建放在服务端 server.js 中，服务器和前端共用一个地址；</p>
<p>通过服务端起 webpack 需要中间件 webpack-dev-middleware，整体逻辑为：</p>
<p>获取 webpack 模块 -&gt; 获取 webpack 配置文件 -&gt; 将配置文件传给 webpack 执行，获得compiler 实例 -&gt; 把 compiler 实例传给 webpack-dev-middleware 中间件，然后整个交给express 作为 express 中间件执行 -&gt; done</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> webapck = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">let</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>)</span><br><span class="line"><span class="keyword">let</span> compiler = webapck(config)</span><br><span class="line"><span class="keyword">let</span> middle = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(middle(compiler))</span><br><span class="line">app.get(<span class="string">'/api/user'</span>,(req, res)=&gt;&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">name</span>: <span class="string">'wangyi123'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is on 3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>此时通过 <code>node server.js</code>起服务器和 webpack 前端构建</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一种方法是我们提倡的跨域配置，配置代理，首选推荐</p>
<p>第二和第三种方法其实是在你能控制后端工程的情况下，把前后端工程合并成一个工程了，区别是第二种方法相当于把后端接口移到前端工程来起，第三种方法是把前端工程构建移到后端工程来起。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="[https://champyin.com/2019/11/05/webpack%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/](https://champyin.com/2019/11/05/webpack解决跨域的几种方法/)">webpack解决跨域的几种方法</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>webpack 图片处理</title>
    <url>/Blog/2020/01/31/webpack%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">
三种引入图片的方式：

<h2 id="1在-js-中创建-Image-实例引入"><a href="#1在-js-中创建-Image-实例引入" class="headerlink" title="1在 js 中创建 Image 实例引入"></a>1在 js 中创建 Image 实例引入</h2><p>把图片当做模块引入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">"./logo.png"</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = <span class="string">'logo'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img)</span><br></pre></td></tr></table></figure></div>

<p>使用 file-loader，默认在内部生成一张图片到 build 目录下，返回生成的图片名字</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'file-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        esModule: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>



<h2 id="2在-css-中引入-background-url"><a href="#2在-css-中引入-background-url" class="headerlink" title="2在 css 中引入 background: url( )"></a>2在 css 中引入 background: url( )</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(./logo.png)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后把 css 文件当做模块引入到入口文件 index.js，import css 文件时候自动调用 file-loader</p>
<h2 id="3HTML-lt-img-src-quot-quot-alt-quot-quot-gt-引入"><a href="#3HTML-lt-img-src-quot-quot-alt-quot-quot-gt-引入" class="headerlink" title="3HTML &lt;img src=&quot;&quot; alt=&quot;&quot;&gt;引入"></a>3HTML <code>&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</code>引入</h2><p> HTML<code>&lt;img src=&quot;./log.png&quot;&gt;</code>直接打包的话由于不是模块引入，build 中的 src 路径是错误的</p>
<p>同时使用 html-withimg-loader 和 file-loader 改变 build 后<code>&lt;img&gt;</code>的 src</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">  use: <span class="string">'html-withimg-loader'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'file-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        esModule: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>



<h2 id="使用-url-loader-处理图片，前两种引入方式都适用"><a href="#使用-url-loader-处理图片，前两种引入方式都适用" class="headerlink" title="使用 url-loader 处理图片，前两种引入方式都适用"></a>使用 url-loader 处理图片，前两种引入方式都适用</h2><p>处理图片经常使用 url-loader，当我们的图片小于多少 k 的时候，用 base 64 来转化，否则使用 file-loader 产生真实的图片</p>
<p>base64 编码可以将一张图片编码成字符串，编码后大小略有增加，但可以减少 http 请求</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">  use:&#123;</span><br><span class="line">    loader:<span class="string">'url-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      limit: <span class="number">1</span>, <span class="comment">// 超过限制使用 file-loader</span></span><br><span class="line">      outputPath: <span class="string">'./img/'</span>,</span><br><span class="line">      esModule: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/5d90cb2c6fb9a04e31420541#heading-9" target="_blank" rel="noopener">webpack loader 从上手到理解系列：url-loader</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>webpack 入门</title>
    <url>/Blog/2020/01/21/webpack-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>webpack 是一个基于 NodeJS 开发的静态模块打包工具，</p>
<p>当 webpack 处理应用程序时，它会递归地构建一个依赖关系图( dependency graph )，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle</p>
<p>代码构建是前端工程化，自动化的体现，把一系列的构建流程由代码去自动实现，提高生产效率，包括如下内容：</p>
<ul>
<li>代码转换：TS 编译 JS ，SCSS 编译 CSS 等</li>
<li>文件优化：压缩 js , css , html, 压缩合并图片等</li>
<li>代码分割：提取多个页面的公共代码，提取首屏不需要执行的代码让其异步加载</li>
<li>模块合并</li>
<li>自动刷新：监听本地源码的变化，自动重新构建，刷新浏览器</li>
<li>代码校验</li>
<li>自动发布：更新完代码后自动构建上线代码</li>
</ul>
<h1 id="安装-webpack"><a href="#安装-webpack" class="headerlink" title="安装 webpack"></a>安装 webpack</h1><p>同时安装 webpack 和 webpack-cli 到开发依赖 devDependencies 中，两种方式效果相同</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack<span class="literal">-cli</span> -<span class="literal">-save</span><span class="literal">-d</span></span><br><span class="line">npm i webpack webpack<span class="literal">-ci</span> <span class="literal">-D</span></span><br></pre></td></tr></table></figure></div>

<h1 id="webpack-config-js-配置"><a href="#webpack-config-js-配置" class="headerlink" title="webpack.config.js 配置"></a>webpack.config.js 配置</h1><p>webpack 使用时必须要先写配置文件 webpack.config.js</p>
<h2 id="入口（entry）"><a href="#入口（entry）" class="headerlink" title="入口（entry）"></a>入口（entry）</h2><p>入口（entry）表示使用哪个 js 文件作为构建内部依赖的开始，从入口文件开始寻找相关依赖。</p>
<p>可以设置单入口或多入口</p>
<h2 id="出口（output）"><a href="#出口（output）" class="headerlink" title="出口（output）"></a>出口（output）</h2><p>出口（output）表示最后输出的文件，只能指定一个输出配置</p>
<p>需要设置 output 的 filename 和 path，为了清理缓存 filename 可以加入hash 后缀， path 指定的打包路径必须为绝对路径，需要使用 Node.js 的 path 模块</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path  = <span class="built_in">require</span>(<span class="string">'path'</span>) <span class="comment">// 引入 Node.js 内置 path 模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filname: <span class="string">'build.[hash:8].js'</span>, <span class="comment">// 文件名添加8位哈希后缀</span></span><br><span class="line">        path: path.resolve(<span class="string">'./build'</span>) <span class="comment">// 使用绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="模式（mode）"><a href="#模式（mode）" class="headerlink" title="模式（mode）"></a>模式（mode）</h2><p>选择生产模式（production） 还是开发模式（development），生产模式会把代码压缩成一行，开发模式有响应的注释，可读性好</p>
<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>webpack默认只能打包处理 Js 类型的文件，无法处理其它类型的文件</p>
<p>如果要处理非 Js 类型的文件，需要安装一些合适 loader 加载器</p>
<p>loader 重要特性：</p>
<ol>
<li>loader 支持链式传递。能够对资源使用流水线(pipeline)。一组链式的 loader 将按照相反的顺序执行</li>
<li>插件（plugin）可以对 loader 进行拓展</li>
</ol>
<p>常见的 loader:</p>
<ol>
<li>css-loader ：加载 css 模块</li>
<li>style-loader ：把 css 变成 <code>&lt;style&gt;</code> 标签插入到 HTML 里</li>
<li>less-loader ：加载 less 模块为 css 模块</li>
</ol>
<h2 id="模块（module）"><a href="#模块（module）" class="headerlink" title="模块（module）"></a>模块（module）</h2><p>module 中用来配置模块加载方式，会对指定后缀的文件按顺序使用一系列的 loader</p>
<p>使用 loader 的顺序是倒叙的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [ <span class="comment">// 从右往左写</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">'style-loader'</span>&#125;, </span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">'css-loader'</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use:[</span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">'style-loader'</span>&#125;, </span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">'css-loader'</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">'less-loader'</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对所有后缀为<code>.css</code>的文件使用 css-loader 加载，然后使用 style-loader 加载变为 <code>&lt;script&gt;</code>标签</p>
<p>对所有后缀为<code>.less</code>的文件使用 less-loader加载变为 css，然后使用 css-loader 加载，然后使用 style-loader 加载变为 <code>&lt;script&gt;</code>标签</p>
<h2 id="插件（plugins）"><a href="#插件（plugins）" class="headerlink" title="插件（plugins）"></a>插件（plugins）</h2><p>插件可以拓展 webpack 的功能，进行代码压缩优化等，webpack 内置了一些插件，大部分需要安装</p>
<p>插件一般是 Class ，使用一个插件需要安装后 require 引入，使用 new 操作符创建一个自定义实例（可以传参 option），然后添加到配置文件的 plugins 数组中</p>
<p>常用插件：</p>
<ol>
<li><p>html-webpack-plugin: 将 html 打包到 build 文件夹下，并且可以引入打包的 js</p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'wepack'</span>) <span class="comment">// 引入 webpack 内部插件</span></span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>) <span class="comment">// 安装插件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">            hash: ture,</span><br><span class="line">            filename: <span class="string">'index.html'</span>,</span><br><span class="line">            minify:&#123;</span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span>, <span class="comment">// 删除双引号</span></span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 删除空格</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>clean-webpack-plugin: 每次打包时清空打包目录文件夹，避免文件堆叠</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'./dist'</span>])<span class="comment">// 可以不写，默认打包目录；也可以用字符串或者数组</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>copy-webpack-plugin: 拷贝文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([ <span class="comment">// 多个拷贝参数设置数组</span></span><br><span class="line">      &#123;<span class="attr">from</span>: <span class="string">'./doc'</span>,<span class="attr">to</span>: <span class="string">'./'</span>&#125; <span class="comment">// 拷贝到打包目录dist</span></span><br><span class="line">    ]), </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>webpack.BannerPlugin (webpack 内置插件) : 在打包的文件开头添加注释声明</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	<span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'make 2020 by wy'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="dev-server"><a href="#dev-server" class="headerlink" title="dev-server"></a>dev-server</h2><p>安装 webpack-dev-server 然后配置 dev-server 可以配置开发服务器，在内存中打包文件，相当于使用打包出来的文件直接开一个服务器用来配合开发</p>
<p>首先安装 webpack-dev-server</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure></div>

<p>然后设置 package.json 中的 scripts 属性添加运行服务器的命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts":&#123;</span><br><span class="line">    "dev": "webpack-dev-server"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后设置 webpack.config.js 的 dev-server 属性</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./build'</span>, </span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">        hot: ture</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>contentBase : 指定项目启动后的主页面</li>
<li>compress : 进行服务器压缩</li>
<li>open : 项目启动后自动打开浏览器</li>
<li>hot : 启动热更行，可以不刷新页面更新代码</li>
</ul>
<h2 id="watch-监控打包"><a href="#watch-监控打包" class="headerlink" title="watch 监控打包"></a>watch 监控打包</h2><p>配置 watch 和 watchOptions 可以开启实时监控打包</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  watch: <span class="literal">true</span>,</span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    poll: <span class="number">1000</span> , <span class="comment">// 每秒询问1000次</span></span><br><span class="line">    aggregateTimeout: <span class="number">500</span>, <span class="comment">// 防抖500ms</span></span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span> <span class="comment">// 忽略监控的文件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>webpack 简单配置</title>
    <url>/Blog/2020/01/21/webpack-%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="单页应用"><a href="#单页应用" class="headerlink" title="单页应用"></a>单页应用</h1><p>单页，只有一个 index.html</p>
<p>src 文件下 index.js 引入了 a.js 模块，另外还有一个 b.js，将 index.js 和 a.js 作为入口打包成一个文件 build.js 引入页面内</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> path  = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [<span class="string">'./src/index.js'</span>, <span class="string">'./src/b.js'</span>],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'build.[hash:8].js'</span>,</span><br><span class="line">    path: path.resolve(<span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      hash: <span class="literal">true</span>, <span class="comment">// 引 js 的时候通过查询参数带 hash，用来清理缓存</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>entry 数组形式，两个入口</p>
<p>插件：</p>
<p>html-webpack-plugin：根据源文件中 html template 打包出一个 html ，自动引入打包的 js 文件</p>
<p>clean-webpack-plugin：output 的 filename 添加 [hash] 后，每次更新内容会产生新 hash 后缀，此插件会删除之前的打包文件，只保留有最新 hash 后缀的文件</p>
<h1 id="多页应用"><a href="#多页应用" class="headerlink" title="多页应用"></a>多页应用</h1><p>多页，设置两个 html ，index.html 使用 index.js ，main.html 使用 main.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> path  = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index_: <span class="string">'./src/index/index.js'</span>,</span><br><span class="line">    main_: <span class="string">'./src/main/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[hash:8].js'</span>, <span class="comment">//多页应用使用 [name]</span></span><br><span class="line">    path: path.resolve(<span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      template: <span class="string">'./src/index/index.html'</span>,</span><br><span class="line">      hash: <span class="literal">true</span>, <span class="comment">// 引 js 的时候通过查询参数带 hash，用来清理缓存</span></span><br><span class="line">      chunks: [<span class="string">'index_'</span>] <span class="comment">// 表示引入的 js 模块</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'main.html'</span>,</span><br><span class="line">      template: <span class="string">'./src/main/main.html'</span>,</span><br><span class="line">      hash: <span class="literal">true</span>, <span class="comment">// 引 js 的时候通过查询参数带 hash，用来清理缓存</span></span><br><span class="line">      chunks: [<span class="string">'main_'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>entry 使用对象形式 ，key 为 chunk name，value  为入口文件</p>
<p>output 多页需要输出多个打包  js 文件，filename 设置 <code>[name]</code>，引用 entry 设置的 chunk name，打包出两个 js 文件分别为 <code>index_.6798b082.js</code>和<code>main_.6798b082.js</code>(加 hash 后缀)</p>
<p>因为多页有两个 html，所以 plugins 数组中需要两个 HtmlWebpackPlugin 实例，chunks 值为数组，表示 html 引入的 chunk name</p>
<h1 id="热更新（以单页为例）"><a href="#热更新（以单页为例）" class="headerlink" title="热更新（以单页为例）"></a>热更新（以单页为例）</h1><p>热更新：不刷新页面，只更新修改的部分</p>
<p>为什么要使用热更新：性能优化，文件太多都刷新会浪费性能；vuex，redux状态管理刷新会丢失</p>
<p>单页，单入口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> path  = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> Webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'build.[hash:8].js'</span>,</span><br><span class="line">    path: path.resolve(<span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 开启热更新，需要引入 webpack 自带的热更新插件 HotModuleReplacementPlugin</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      hash: <span class="literal">true</span>, <span class="comment">// 引 js 的时候通过查询参数带 hash，用来清理缓存</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> Webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>引入 webpack 自带热更新插件 HotModuleReplacementPlugin，devServer 设置 hot 为 true 开启热更新</p>
<p>对入口文件 index.js 监控热更新</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot)&#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="加载样式"><a href="#加载样式" class="headerlink" title="加载样式"></a>加载样式</h1><p>webpack 默认只能处理 js 模块，处理其他文件例如 css 、less需要 loader 加载</p>
<ul>
<li>style-loader：将样式文件变成 style 标签插入页面，</li>
<li>css-loader：把 css 变成 js 模块，默认支持热更新功能</li>
<li>less-loader ：加载 less</li>
</ul>
<p>要处理和引入样式文件，一定是因为入口文件引入了相关样式模块，例如入口文件 index.js 引入了 css 模块和 less 模块</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./style.less'</span></span><br></pre></td></tr></table></figure></div>

<h2 id="lt-style-gt-标签引入样式"><a href="#lt-style-gt-标签引入样式" class="headerlink" title="&lt;style&gt;标签引入样式"></a><code>&lt;style&gt;</code>标签引入样式</h2><p>将 css 文件和 less 文件处理，变成<code>&lt;style&gt;</code>标签插入<code>&lt;body&gt;</code>，打包后只有 build.js 文件，样式也被处理进去，因为有 css-loader ，支持热更新</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            use:[</span><br><span class="line">              &#123;<span class="attr">loader</span>: <span class="string">'style-loader'</span>&#125;,</span><br><span class="line">              &#123;<span class="attr">loader</span>: <span class="string">'css-loader'</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>, </span><br><span class="line">            use:[</span><br><span class="line">              &#123;<span class="attr">loader</span>: <span class="string">'style-loader'</span>&#125;,</span><br><span class="line">              &#123;<span class="attr">loader</span>: <span class="string">'css-loader'</span>&#125;,</span><br><span class="line">              &#123;<span class="attr">loader</span>: <span class="string">'less-loader'</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="抽离出-css-文件，link-引入样式"><a href="#抽离出-css-文件，link-引入样式" class="headerlink" title="抽离出 css 文件，link 引入样式"></a>抽离出 css 文件，link 引入样式</h2><p>如果只用 style-loader 加载样式，样式都会在打包的 js 文件中，文件会很大</p>
<p>可以使用  mini-css-extract-plugin 抽离样式到一个 css 文件，通过 link 引入</p>
<p>使用 postcss-loader 和 autoprofixer 插件给样式加浏览器兼容前缀</p>
<p>使用 copy-webpack-plugin :用来拷贝文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> Webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">let</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="keyword">let</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'build.[hash:8].js'</span>,</span><br><span class="line">    path: path.resolve(<span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 开启热更新，需要引入 webpack 自带的热更新插件 HotModuleReplacementPlugin</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="string">'./src/doc'</span>,</span><br><span class="line">        to: <span class="string">'public'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'./css/style.css'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      hash: <span class="literal">true</span>, <span class="comment">// 引 js 的时候通过查询参数带 hash，用来清理缓存</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> Webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则，为了匹配文件使用</span></span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'postcss-loader'</span> &#125;</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'postcss-loader'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'less-loader'</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>要给样式添加前缀还需要设置 postcss 的配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>工具使用</category>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>CommonJS规范和ES6模块规范</title>
    <url>/Blog/2020/01/21/CommonJS%E8%A7%84%E8%8C%83%E5%92%8CES6%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">
-

<h1 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h1><p>Node 应用由模块组成，采用 CommonJS 规范</p>
<p>导出模块采用<code>module.exports</code>,<code>module.exports</code>是一个对象，也是导出的接口</p>
<p>导入模块采用<code>require</code>引入这个对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> add3 = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> + value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="导出和引入-example-js-中的模块"><a href="#导出和引入-example-js-中的模块" class="headerlink" title="导出和引入 example.js 中的模块"></a>导出和引入 example.js 中的模块</h2><p>挂载 module.exports 对象上导出和引入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出1,分别导出</span></span><br><span class="line"><span class="built_in">module</span>.exports.x = x</span><br><span class="line"><span class="built_in">module</span>.exports.add3 = add3</span><br><span class="line"><span class="comment">// 导出2，对象解构赋值</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;x, add3&#125;</span><br><span class="line"><span class="comment">// 引入1，解构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123;x,add3&#125; = <span class="built_in">require</span>(<span class="string">'./example.js'</span>)</span><br><span class="line"><span class="comment">// 引入2，整个对象</span></span><br><span class="line"><span class="keyword">let</span> example = <span class="built_in">require</span>(<span class="string">'./example.js'</span>)</span><br><span class="line">example.add3(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>

<p>只导出一个目标时，不使用对象形式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line">moduel.exports = add3</span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">let</span> add3 = <span class="built_in">require</span>(<span class="string">'./example.js'</span>)</span><br></pre></td></tr></table></figure></div>

<h1 id="ES6模块规范"><a href="#ES6模块规范" class="headerlink" title="ES6模块规范"></a>ES6模块规范</h1><p><code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于引入其他模块提供的功能。</p>
<h2 id="导出和引入-example-js-中的模块-1"><a href="#导出和引入-example-js-中的模块-1" class="headerlink" title="导出和引入 example.js 中的模块"></a>导出和引入 example.js 中的模块</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> add3 = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> + value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> &#123;x, add3&#125;</span><br><span class="line"><span class="comment">// 引入1,对象解构赋值</span></span><br><span class="line"><span class="keyword">import</span> &#123;x, add3&#125; <span class="keyword">from</span> <span class="string">'./example.js'</span></span><br><span class="line"><span class="comment">// 引入2，使用 * 指定一个对象，所有输出值都加载到这个对象上</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> example <span class="keyword">from</span> <span class="string">'./example.js'</span></span><br><span class="line">example.add3(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>

<p>只导出一个目标时使用 export default</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> add3</span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> add3 <span class="keyword">from</span> <span class="string">'./example.js'</span></span><br></pre></td></tr></table></figure></div>

<h2 id="浏览器加载-ES6-模块"><a href="#浏览器加载-ES6-模块" class="headerlink" title="浏览器加载 ES6 模块"></a>浏览器加载 ES6 模块</h2><p>浏览器加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入<code>type=&quot;module&quot;</code>属性</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./test.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>上面代码在网页中插入一个模块<code>test.js</code>，由于 type 属性设置为 module，所以浏览器知道这是一个 ES6 模块</p>
<p>浏览器对于<code>type=module</code>的<code>&lt;script&gt;</code>，都是异步加载，相当于设置了<code>defer</code>属性，延迟脚本会等到整个页面渲染完再执行模块脚本，避免浏览器阻塞。</p>
<p>如果页面有多个<code>&lt;script type=&quot;module&quot;&gt;</code>，它们会按照在页面的顺序依次执行</p>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
  </entry>
  <entry>
    <title>npm包管理工具</title>
    <url>/Blog/2020/01/09/npm%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">
-

<h1 id="npm-介绍"><a href="#npm-介绍" class="headerlink" title="npm 介绍"></a>npm 介绍</h1><h2 id="什么是-npm"><a href="#什么是-npm" class="headerlink" title="什么是 npm"></a>什么是 npm</h2><p>npm 全称 Node Package Manager，是使用 Node.js 写的包管理工具，可以让 JavaScript 开发者分享，复用代码更加方便：</p>
<p>在程序开发中我们常常需要依赖别人提供的框架，写 js 也不例外。这些可以重复的框架代码被称作包（package）或者模块（module），一个包可以是一个文件夹里放着几个文件，同时有一个叫做 package.json 的文件。</p>
<p>当我们想要使用开源的 package 时，使用<code>npm install module-name</code>进行下载，下载的代码出现在 node_modules 目录中，我们就可以在本地使用。</p>
<h1 id="使用-npm"><a href="#使用-npm" class="headerlink" title="使用 npm"></a>使用 npm</h1><h2 id="安装-npm"><a href="#安装-npm" class="headerlink" title="安装 npm"></a>安装 npm</h2><p>npm 集成在 Node.js 中，下载安装 Node.js 即可，可以查看 Node 和 npm 版本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">node <span class="literal">-v</span></span><br><span class="line">npm <span class="literal">-v</span></span><br></pre></td></tr></table></figure></div>



<h2 id="更新-npm"><a href="#更新-npm" class="headerlink" title="更新 npm"></a>更新 npm</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install npm@latest <span class="literal">-g</span></span><br></pre></td></tr></table></figure></div>

<p><code>-g</code>表示全局安装</p>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><h3 id="package-json-创建和使用"><a href="#package-json-创建和使用" class="headerlink" title="package.json 创建和使用"></a>package.json 创建和使用</h3><p>管理本地安装的 npm 包需要 package.json 文件信息，在使用 npm 命令安装包之前首先在根目录初始化一个 package.json 文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm init <span class="literal">-y</span></span><br></pre></td></tr></table></figure></div>

<p>每次使用 npm 安装新的包，package.json 都会更新对应信息，在使用别人的项目时根据package.json 信息，执行<code>npm install</code>下载所有需要的包</p>
<blockquote>
<p>项目在上传 github 时候，依赖包文件夹 node_modules 是不上传的，只上传 package.json</p>
</blockquote>
<h3 id="package-json-信息"><a href="#package-json-信息" class="headerlink" title="package.json 信息"></a>package.json 信息</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install babel<span class="literal">-cli</span> -<span class="literal">-save</span><span class="literal">-dev</span> <span class="comment"># 安装 babel-cli</span></span><br><span class="line">npm install babel<span class="literal">-preset</span><span class="literal">-es2015</span> -<span class="literal">-save</span><span class="literal">-dev</span> <span class="comment"># 安装 ES2015转码规则</span></span><br></pre></td></tr></table></figure></div>

<p>package.json 文件如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"test"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"babel src -d lib"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>main: 入口文件，一般为 index.js</p>
<p>scripts: 支持的 npm 脚本，执行<code>npm run build</code>就相当于执行<code>babel src -d lib</code></p>
<blockquote>
<ol>
<li>每当执行 npm run，就会新建一个 Shell，在这个 Shell 里执行指定的脚本命令</li>
<li>npm run 新建的 Shell，会将当前项目目录的 node_modules/.bin  子目录加入 PATH 环境变量，执行结束后再将 PATH 恢复</li>
<li>node_modules/.bin 目录下存储的都是脚本的软连接，都可以直接使用脚本名调用，不必加路径</li>
</ol>
</blockquote>
<p>dependencies: 在生产环境中用到的依赖包，发布后依然需要例如 VUE，React</p>
<p>devDependencies:  在开发、测试环境中用的依赖包，比如编译工具，压缩工具</p>
<h3 id="package-json-与-package-lock-json-区别"><a href="#package-json-与-package-lock-json-区别" class="headerlink" title="package.json 与 package-lock.json 区别"></a>package.json 与 package-lock.json 区别</h3><p>package.json 是通过<code>npm init</code>创建时生成的，package.json 文件中会记录项目中所需要的模块。记录的只是每个模块的基本信息。模块名称和大版本信息</p>
<p>在使用<code>npm install</code>的时候会自动生成一个 package-lock.json 的文件，package-lock.json 文件则会记录每个模块的详细信息，如模块的具体版本号和各个模块所依赖的子模块的信息</p>
<p><code>npm install</code>的过程大致就是从 package.json 中读取所有的依赖信息，然后再与node_modules 中已经安装的依赖进行对比，如果没有则通过 package-lock.json 获取相应版本号下载安装.如果已经存在则会通过 package-lock.json 检查更新</p>
<h2 id="安装-卸载包"><a href="#安装-卸载包" class="headerlink" title="安装/卸载包"></a>安装/卸载包</h2><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><p>安装之前先运行<code>npm init -y</code>初始化 package.json</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地安装，只能在当前项目中使用</span></span><br><span class="line">npm install module<span class="literal">-name</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动把模块名和版本号添加到 package.josn 的dependencies 中</span></span><br><span class="line">npm install module<span class="literal">-name</span> -<span class="literal">-save</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动把模块名和版本号添加到 package.json 的devDependencies 中</span></span><br><span class="line">npm install module<span class="literal">-name</span> -<span class="literal">-save</span><span class="literal">-dev</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局安装，可以在命令行中直接使用</span></span><br><span class="line">npm install module<span class="literal">-name</span> <span class="literal">-g</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 package.json 中 dependencies 和 devDependencies 中所有的模块</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只安装 dependencies 中的模块</span></span><br><span class="line">npm install -<span class="literal">-production</span></span><br></pre></td></tr></table></figure></div>

<h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm uninstall module<span class="literal">-name</span></span><br><span class="line">npm uninstall module<span class="literal">-name</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure></div>



<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm update module<span class="literal">-name</span></span><br></pre></td></tr></table></figure></div>

<h3 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h3><p>主要解决调用项目内部安装模块问题，以安装 babel-cli 后调用 babel 为例</p>
<p>一般调用要修改 package.json 的 scripts 字段</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"babel src -d lib"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></div>

<p>如果使用 npx 调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npx babel src <span class="literal">-d</span> lib</span><br></pre></td></tr></table></figure></div>

<p>npx 的原理很简单，就是运行的时候，会到 node_modules/.bin 路径和环境变量 $PATH 里面，检查命令是否存在</p>
<h1 id="npm-vs-Yarn"><a href="#npm-vs-Yarn" class="headerlink" title="npm vs Yarn"></a>npm vs Yarn</h1><p>Yarn 也是 JavaScript 包管理工具，和 npm 有很多相似之处，但下载包的速度更快，两者都是使用 package.json 记录所需模块的信息</p>
<p>使用 npm 安装包会生成 package-lock.json ，使用 Yarn 安装包会生成 yarn.lock</p>
<h2 id="Yarn使用方法"><a href="#Yarn使用方法" class="headerlink" title="Yarn使用方法"></a>Yarn使用方法</h2><p><a href="https://yarn.bootcss.com/docs/usage/" target="_blank" rel="noopener"> Yarn常用命令</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="noopener">npm 模块安装机制简介</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">npm scripts 使用指南</a></p>
<p><a href="https://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener">npx 使用教程</a></p>
<p><a href="https://juejin.im/entry/598286cb6fb9a03c5b04a4ff" target="_blank" rel="noopener">npm 与 package.json 快速入门</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>npm/Yarn使用</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客使用与写作</title>
    <url>/Blog/2020/01/08/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%86%99%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"title"</span></span><br></pre></td></tr></table></figure></div>

<p>创建一个 title.md 文件，在博客目录 source/_posts 下</p>
<h1 id="设置Front-matter"><a href="#设置Front-matter" class="headerlink" title="设置Front-matter"></a>设置Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code>分隔的区域，用于指定此文件的变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: web性能优化</span><br><span class="line">date: 2019-12-02 21:43:18</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">- </span>面试</span><br><span class="line"><span class="bullet">- </span>web性能优化</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>前端</span><br><span class="line">---</span><br></pre></td></tr></table></figure></div>

<p>表示分类为面试/web性能优化</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">title</td>
<td align="center">标题</td>
</tr>
<tr>
<td align="center">date</td>
<td align="center">建立日期</td>
</tr>
<tr>
<td align="center">updated</td>
<td align="center">更新日期</td>
</tr>
<tr>
<td align="center">tags</td>
<td align="center">标签，没有顺序和层次性</td>
</tr>
<tr>
<td align="center">categories</td>
<td align="center">分类，有顺序和层次性，前面为父类，后面为子类</td>
</tr>
</tbody></table>
<h1 id="写作规范"><a href="#写作规范" class="headerlink" title="写作规范"></a>写作规范</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用各级标题时，注意该部分内容结束后需要换行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line">内容</span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题1</span></span><br><span class="line">内容</span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题2</span></span><br><span class="line">内容</span><br></pre></td></tr></table></figure></div>

<p>博客会对各级标题进行自动分类展示在侧边，最好按级别使用各级标题，不要跳跃使用，标题前面也不要加数字说明</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>可以使用 Markdown 格式的图片引用<code>![img](url)</code></p>
<p>推荐使用 hexo 博客的格式，可以指定图片的大小<code>&lt;img src=&quot;url&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;</code></p>
<p>使用 <code>&lt;img&gt;</code> 引用图片请求可能得到 403 错误，需要在 Markdown 文档的 Front-matter 结束后添加一行<code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</code>,此解决方案已经加入到了模板设置中，使用<code>hexo new</code>创建博客时不需要再额外设置了。</p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>使用代码块需要在前面写明类型，比如 powershell , javascript ,这样代码有高亮显示，易读性好</p>
<h2 id="内容高亮"><a href="#内容高亮" class="headerlink" title="内容高亮"></a>内容高亮</h2><p>hexo 博客中的 Markdown 不支持高亮显示，和有道云笔记有些不一样。</p>
<h1 id="预览和部署"><a href="#预览和部署" class="headerlink" title="预览和部署"></a>预览和部署</h1><h2 id="处理静态文件"><a href="#处理静态文件" class="headerlink" title="处理静态文件"></a>处理静态文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></div>

<p>生成静态文件，每次更新 markdown 源文件都需要执行此命令重新生成静态文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo a</span><br></pre></td></tr></table></figure></div>

<p>在博客内开启了Algolia搜索，每次添加，删除博客后执行此命令生成新的检索索引</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></div>

<p>删除静态文件</p>
<h2 id="利用jsdelivr访问github图片作为图床"><a href="#利用jsdelivr访问github图片作为图床" class="headerlink" title="利用jsdelivr访问github图片作为图床"></a>利用jsdelivr访问github图片作为图床</h2><p>将github作为图床上传图片，国内访问速度太慢，通过jsdelivr使用CDN访问加速</p>
<p>每更新一次github仓库，就执行Draft a new release，记录版本号，</p>
<p>使用<code>https://cdn.jsdelivr.net/gh/Grit0821/Blogbed@1.1/index_img.jpg</code>引用Blogbed仓库下的index_img.jpg，‘@’后面跟release的版本号</p>
<h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p>本地服务器预览 </p>
<h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>写作规范</tag>
      </tags>
  </entry>
  <entry>
    <title>异步和 Event Loop</title>
    <url>/Blog/2019/12/04/%E5%BC%82%E6%AD%A5%E5%92%8C%20Event-Loop/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">
-

<h2 id="JS-同步与异步"><a href="#JS-同步与异步" class="headerlink" title="JS 同步与异步"></a>JS 同步与异步</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>函数在返回的时候能够拿到执行结果</p>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>函数返回的时候，暂时得不到结果，将来通过一定手段（例如回调函数）得到结果，例如 AJAX 操作，定时器，文件异步读取等<br><a href="https://segmentfault.com/img/bV2ShQ?w=640&h=306" data-fancybox="group" data-caption="undefined" class="fancybox"><img width="50%" height="50%" data-src="https://segmentfault.com/img/bV2ShQ?w=640&h=306" class="lazyload"></a></p>
<h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>JavaScript 是一门语言，单线程还是多线程由运行环境决定；在 js 的运行环境浏览器或者 Node 中 js 的执行是单线程的</p>
<p>单线程是指 js 引擎中负责解析执行 js 代码的线程只有一个</p>
<p>一个浏览器通常由以下几个常驻的线程：</p>
<ol>
<li>渲染引擎线程，负责页面的渲染</li>
<li>js 引擎线程，负责 js 的解析和执行</li>
<li>定时触发器线程，处理 setInterval 和 setTimeout </li>
<li>事件触发线程，处理 DOM 事件</li>
<li>异步 http 请求线程，处理 http 请求</li>
</ol>
<h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><p>js 实现异步的核心就是事件循环( Event Loop )</p>
<h3 id="chrome-中的-Event-Loop"><a href="#chrome-中的-Event-Loop" class="headerlink" title="chrome 中的 Event Loop"></a>chrome 中的 Event Loop</h3><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>同步任务直接在主线程上排队执行，异步任务被放到相应的任务队列中，任务下一步会被移到调用栈（call stack），然后主线程执行调用栈的任务。<br><a href="https://user-gold-cdn.xitu.io/2019/1/10/1683863633586974?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" data-fancybox="group" data-caption="undefined" class="fancybox"><img width="50%" height="50%" data-src="https://user-gold-cdn.xitu.io/2019/1/10/1683863633586974?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" class="lazyload"></a></p>
<h4 id="两种异步任务"><a href="#两种异步任务" class="headerlink" title="两种异步任务"></a>两种异步任务</h4><p>宏任务( macrotask )：一会执行，setTimeout , setInterval</p>
<p>微任务( microtask )：马上执行， promise.then(fn) ，注意当 promise 实例 resolve 的时候 fn 回调才会放到微任务中</p>
<ul>
<li>微任务优先宏任务执行</li>
<li>宏任务是在队列中按顺序逐个执行，微任务是一次执行完一整个队列</li>
<li>创建 Promise 实例时传入的函数是同步任务；new Promise(fn)</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise1'</span>)  </span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout2'</span>)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise2'</span>)    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  输出结果： Promise1，setTimeout1，Promise2，setTimeout2</span></span><br></pre></td></tr></table></figure></div>
<a href="http://lynnelv.github.io/img/article/event-loop/browser-excute-animate.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="http://lynnelv.github.io/img/article/event-loop/browser-excute-animate.gif" class="lazyload"></a>

<h4 id="面试例题"><a href="#面试例题" class="headerlink" title="面试例题"></a>面试例题</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印结果 1(同步) 3(同步) 4(同步) 2(微任务) 5(微任务)</span></span><br><span class="line"><span class="comment">// 注意 await 要转化为 promise 再判断</span></span><br></pre></td></tr></table></figure></div>
<p>解析：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> async2()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(async2).resolve(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p><a href="https://segmentfault.com/a/1190000013039660" target="_blank" rel="noopener">JavaScript同步和异步</a><br><a href="http://lynnelv.github.io/js-event-loop-browser" target="_blank" rel="noopener">深入理解js事件循环机制（浏览器篇）</a></p>
<h3 id="Node-js-中的-Event-Loop"><a href="#Node-js-中的-Event-Loop" class="headerlink" title="Node.js 中的 Event Loop"></a>Node.js 中的 Event Loop</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>当 Node.js 启动时，会做这几件事:</p>
<ol>
<li>初始化 event loop</li>
<li>开始执行脚本,这些脚本有可能会调用一些异步 API 、设定计时器或者调用  process.nextTick() </li>
<li>开始处理 event loop</li>
</ol>
<h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><a href="http://lynnelv.github.io/img/article/event-loop/node-libuv.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="http://lynnelv.github.io/img/article/event-loop/node-libuv.png" class="lazyload"></a>

<p>重要阶段解析</p>
<p>timers : 执行 setTimeout() 、setInterval() 的回调</p>
<p>poll (轮循) : 获取新的 I/O 事件, Node 会去检查有无已过期的 timer，如果有则把它的回调压入 timers 的任务队列中等待执行</p>
<p>check: 执行 setImmediate() 的回调</p>
<blockquote>
<p>process.nextTick() 并不是 event loop 的一部分,不管 event loop 当前处于哪个阶段，nextTick 队列都是在当前阶段后就被执行了。</p>
</blockquote>
<h4 id="setImmediate-vs-setTimeout-fn-0"><a href="#setImmediate-vs-setTimeout-fn-0" class="headerlink" title="setImmediate() vs setTimeout(fn,0)"></a>setImmediate() vs setTimeout(fn,0)</h4><p>setImmediate() 的作用是在当前 poll 阶段结束后调用一个函数。 </p>
<p>setTimeout() 的作用是在一段时间后调用一个函数。 即使 delay 设置为 0,最小也默认为4</p>
<p>直接运行时无法确定两者的执行顺序，</p>
<ul>
<li>如果 Node 启动时间比较长，进入事件循环时，setTimeout() 已经超时了，就会直接在 timers 调用</li>
<li>如果 Node 启动时间比较短，进入 timers ，然后 poll ，然后在 check 调用了 setImmediate()  </li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'immediate'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<p>如果把上面代码放到 I/O 操作的回调里，setImmediate 的回调就总是优先于 setTimeout 的回调</p>
<p>因为在读取文件在 poll 阶段拿到回调，会先经过 check</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'immediate'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果 immediate timeout</span></span><br></pre></td></tr></table></figure></div>

<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'immediate'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  process.nextTick(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'nextTick'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果  nextTick immediate</span></span><br><span class="line"><span class="comment">// process.nextTick() 在timers阶段结束时立即执行</span></span><br><span class="line"><span class="comment">// setImmediate() 被放到下一次循环中的check执行</span></span><br></pre></td></tr></table></figure></div>
<p><a href="https://juejin.im/post/5ab7677f6fb9a028d56711d0#heading-11" target="_blank" rel="noopener">Event Loop、计时器、nextTick</a><br><a href="http://lynnelv.github.io/js-event-loop-nodejs" target="_blank" rel="noopener">深入理解js事件循环机制（Node.js篇）</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>懒加载和预加载</title>
    <url>/Blog/2019/12/04/%E6%87%92%E5%8A%A0%E8%BD%BD%E5%92%8C%E9%A2%84%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">
-

<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p><a href="https://zhuanlan.zhihu.com/p/25455672" target="_blank" rel="noopener">延迟加载的三种方式</a></p>
<h3 id="懒加载概念"><a href="#懒加载概念" class="headerlink" title="懒加载概念"></a>懒加载概念</h3><p>懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种很好优化网页性能的方式；</p>
<p>用户滚动到它们之前，可视区域外的图像不会加载，可以帮助减少服务器负载。常适用图片很多，页面很长的电商网站场景中。</p>
<h3 id="懒加载的优点"><a href="#懒加载的优点" class="headerlink" title="懒加载的优点"></a>懒加载的优点</h3><p>能提升用户的体验，减少首屏加载时间</p>
<p>减少无效资源的加载，这样能明显减少了服务器的压力和流量，也能够减小浏览器的负担</p>
<p>防止并发加载的资源过多会阻塞js的加载</p>
<h3 id="实现懒加载"><a href="#实现懒加载" class="headerlink" title="实现懒加载"></a>实现懒加载</h3><h4 id="关于页面尺寸的补充知识"><a href="#关于页面尺寸的补充知识" class="headerlink" title="关于页面尺寸的补充知识"></a>关于页面尺寸的补充知识</h4><a href="https://lilywei739.github.io/img/20170206/20170206-1.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://lilywei739.github.io/img/20170206/20170206-1.jpg" class="lazyload"></a>

<p>可视区高度：window.innerHeight / document.documentElement.clientHeight（document.documentElement 指根元素html）/ document.body.clientHeight</p>
<p>浏览器窗口与文档顶部之间的距离，也就是滚动条滚动的距离：window.scrollY / window.pageYOffset / document.documentElement.scrollTop</p>
<p>元素离文档顶部的距离：获取元素的 offsetTop 属性</p>
<h4 id="初始版本懒加载"><a href="#初始版本懒加载" class="headerlink" title="初始版本懒加载"></a>初始版本懒加载</h4><p>原理：</p>
<p>将页面上的图片的 src 属性设为空字符串或者 loading.gif ，而图片的真实路径则设置在 data-src 属性中，当页面滚动的时候需要去监听 scroll 事件，在 onscroll 事件的回调中，判断我们的懒加载的图片是否进入可视区域,如果图片在可视区内将图片的 src 属性设置为 data-src 的值。</p>
<p><a href="https://github.com/Grit0821/lazy-load/blob/aeb0636a2456de3c2066cdeb6230060699d57b2c/index.html" target="_blank" rel="noopener">代码</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    img&#123;</span><br><span class="line">      display: block;</span><br><span class="line">      margin-bottom: 50px;</span><br><span class="line"><span class="css">      <span class="selector-tag">height</span>: 200<span class="selector-tag">px</span>;  <span class="comment">/*写高度为了占位置*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/1.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/2.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/3.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/4.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/5.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/6.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/7.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/8.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/9.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/10.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/11.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"images/12.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">lazyloadGenerator</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> images = <span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>)</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> len = images.length</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> n = <span class="number">0</span> <span class="comment">// 存储图片加载到的位置，利用一个闭包优化遍历</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> seeHeight = <span class="built_in">document</span>.documentElement.clientHeight</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=n;i&lt;len;i++)&#123;</span></span><br><span class="line">          if(images[i].offsetTop &lt; seeHeight+scrollTop)&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(images[i].getAttribute(<span class="string">'src'</span>)=== <span class="string">"images/loading.gif"</span>)&#123;</span></span><br><span class="line"><span class="actionscript">              images[i].src = images[i].getAttribute(<span class="string">'data-src'</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">            n++</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> lazyload = lazyloadGenerator()</span></span><br><span class="line"><span class="actionscript">    lazyload() <span class="comment">// 初始化加载首屏图片</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onscroll = lazyload</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="使用节流进行优化的懒加载"><a href="#使用节流进行优化的懒加载" class="headerlink" title="使用节流进行优化的懒加载"></a>使用节流进行优化的懒加载</h4><p>原理：onscroll 的回调使用节流函数，可以减少事件触发次数，优化性能</p>
<p><a href="https://github.com/Grit0821/lazy-load/blob/dd873002ba8687170be7ba1c5093a95efba31077/index.html" target="_blank" rel="noopener">代码</a></p>
<h4 id="利用-IntersectionObserver-API-实现懒加载"><a href="#利用-IntersectionObserver-API-实现懒加载" class="headerlink" title="利用 IntersectionObserver API 实现懒加载"></a>利用 IntersectionObserver API 实现懒加载</h4><p>代码简洁，但是有的浏览器不支持</p>
<p> <a href="http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html" target="_blank" rel="noopener">IntersectionObserver API 使用教程</a></p>
<p><a href="https://github.com/Grit0821/lazy-load/blob/95f6c37b7e448c2d99739b90d48e2e0fb3af4af1/index.html" target="_blank" rel="noopener">代码</a></p>
<h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><p><a href="https://juejin.im/post/5b0c3b53f265da09253cbed0" target="_blank" rel="noopener">懒加载和预加载</a></p>
<h3 id="预加载的概念"><a href="#预加载的概念" class="headerlink" title="预加载的概念"></a>预加载的概念</h3><p>提前加载图片，当用户需要查看时可直接从本地缓存中渲染</p>
<h3 id="预加载的优点"><a href="#预加载的优点" class="headerlink" title="预加载的优点"></a>预加载的优点</h3><p>图片预先加载到浏览器中，提升用户的浏览体验</p>
<h3 id="实现预加载"><a href="#实现预加载" class="headerlink" title="实现预加载"></a>实现预加载</h3><h4 id="控制-css-实现"><a href="#控制-css-实现" class="headerlink" title="控制 css 实现"></a>控制 css 实现</h4><p>原理：</p>
<ul>
<li><p>使用 css 设置 div 的 background 或者设置 img 为 display: none; ，目的就是加载图片资源但不显示在页面中</p>
</li>
<li><p>然后使用 JS onload事件控制在当前页面加载完后再去请求资源</p>
</li>
</ul>
<p>代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听当前页面资源的加载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addload</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oldload = <span class="built_in">window</span>.onload</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onload !== <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="built_in">window</span>.onload = func</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            oldload()</span><br><span class="line">            func()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'div#img'</span>).style.background = <span class="string">"url(./images/1.png) 1000px 1000px"</span> <span class="comment">// 设置背景偏移</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addload(proload)</span><br></pre></td></tr></table></figure></div>
<h4 id="使用-JS-实现"><a href="#使用-JS-实现" class="headerlink" title="使用 JS 实现"></a>使用 JS 实现</h4><p>原理：创建 Image 实例</p>
<p>代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> images = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preload</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; preload.arguments.length; i++) &#123;  </span><br><span class="line">        images[i] = <span class="keyword">new</span> Image()  </span><br><span class="line">        images[i].src = preload.arguments[i]  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">preload(</span><br><span class="line">    <span class="string">"./images/1.png"</span>,</span><br><span class="line">    <span class="string">"./images/2.png"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 还可以用 addload 封装一下在当前页面加载完再去请求资源</span></span><br><span class="line">addload(preload)</span><br></pre></td></tr></table></figure></div>

<h4 id="使用-AJAX-实现"><a href="#使用-AJAX-实现" class="headerlink" title="使用 AJAX 实现"></a>使用 AJAX 实现</h4><p>原理：</p>
<ul>
<li>不仅可以加载图片，还可以加载 css , js</li>
<li>而且加载不会影响当前的页面</li>
</ul>
<p>代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="comment">// XHR to request a JS and a CSS  </span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, <span class="string">'http://geekjc.com/preload.js'</span>);  </span><br><span class="line">        xhr.send(<span class="string">''</span>);  </span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, <span class="string">'http://geekjc.com/preload.css'</span>);  </span><br><span class="line">        xhr.send(<span class="string">''</span>);  </span><br><span class="line">        <span class="comment">// preload image  </span></span><br><span class="line">        <span class="keyword">new</span> Image().src = <span class="string">"http://geekjc.com/preload.png"</span>;  </span><br><span class="line">    &#125;, <span class="number">1000</span>);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h4 id="使用-preload-JS-库实现"><a href="#使用-preload-JS-库实现" class="headerlink" title="使用 preload JS 库实现"></a>使用 preload JS 库实现</h4><p><a href="https://createjs.com/getting-started/preloadjs" target="_blank" rel="noopener">preload JS</a></p>
]]></content>
      <categories>
        <category>面试</category>
        <category>web性能优化</category>
      </categories>
  </entry>
  <entry>
    <title>web性能优化</title>
    <url>/Blog/2019/12/02/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">


<p><a href="https://www.cnblogs.com/qianguyihao/p/8550195.html" target="_blank" rel="noopener">前端页面性能优化的几种方式</a><br><a href="https://juejin.im/post/5b022bdf518825426d2d69fe" target="_blank" rel="noopener">页面性能优化办法有哪些？</a></p>
<p>答题思路：按照从输入 url 到加载页面的顺序思考，寻找可以优化的点</p>
<p>量化web性能的工具：chrome 检查工具，Audits 选项</p>
<h2 id="DNS-查询"><a href="#DNS-查询" class="headerlink" title="DNS 查询"></a>DNS 查询</h2><p>减少 DNS 查询，可以把资源放在一个域名下</p>
<p>使用 CDN (content distribute network, 内容分发网络)加速</p>
<ul>
<li>本质是一种缓存，将数据缓存在离用户最近的地方，使得用户以最快速度获取数据。</li>
</ul>
<h2 id="建立-TCP-链接"><a href="#建立-TCP-链接" class="headerlink" title="建立 TCP 链接"></a>建立 TCP 链接</h2><p>http 请求头加 keep-alive 进行连接复用，减少 TCP 连接次数</p>
<ul>
<li><p>HTTP 1.0 默认非 Keep-Alive 模式，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接；用   Keep-Alive 模式（连接重用）时，HTTP 请求头中添加一个字段 Connection: Keep-Alive，服务器也会在响应头中添加一个同样的字段来使用 Keep-Alive。Keep-Alive 功能使客户端到服务器端的连接持续有效，出现后继请求时，能避免了重新建立连接。</p>
</li>
<li><p>HTTP 1.1 默认启用 Keep-Alive ,除非在请求头或响应头中指明要关闭：Connection: Close </p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/34052073" target="_blank" rel="noopener">keep-alive</a></p>
</li>
</ul>
<p>HTTP 2.0 多路复用</p>
<ul>
<li>多路复用（MultiPlexing），即连接共享，即每一个 request 都是是用作连接共享机制的。一个 request 对应一个 id ，这样一个连接上可以有多个 request，每个连接的 request 可以随机的混杂在一起，接收方可以根据 request 的 id 将 request 再归属到各自不同的服务端请求里面。</li>
</ul>
<h2 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h2><p>减少http请求，合理设置http缓存</p>
<ul>
<li>合并 CSS , 合并 JavaScript , 合并图片等.将浏览器一次需要的这些文件合并成一个, 那么就只需要一次请求了.</li>
<li>使用 http 头中的 cache-control 和 expiress 属性可以设定浏览器强缓存</li>
</ul>
<p>减小cookie</p>
<ul>
<li>cookie 包含在每次请求和响应中, 太大的 cookie 回严重影响数据传输</li>
</ul>
<h2 id="接收响应"><a href="#接收响应" class="headerlink" title="接收响应"></a>接收响应</h2><p>压缩 html ,  css , js 等文件</p>
<p>通过设置协商缓存，接收响应 304 ,使用缓存资源</p>
<p>服务端采用 Gzip 压缩，客户端接收压缩资源再解压</p>
<h2 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h2><p>CSS放在顶部<code>&lt;head&gt;</code>中</p>
<ul>
<li>文件逐行解析，遇到标签构建 dom ，但不渲染，只有 CSS 全部下载，解析完毕才开始渲染 dom</li>
</ul>
<p>JS放在<code>&lt;body&gt;</code>底部，或者使用异步脚本或延迟脚本（不会阻塞 DOM 渲染）</p>
<ul>
<li>加载 JS 会立即执行，会阻塞 dom 渲染，并且 js 放在底部可以拿到之前的节点</li>
</ul>
<p>懒加载</p>
<ul>
<li>减少首屏加载时间，减少无效资源的加载</li>
<li>将页面上的图片的 src 属性设为空字符串，而图片的真实路径则设置在 data-src 属性中， 当页面滚动的时候需要去监听 scroll 事件，在 scroll 事件的回调中，判断我们的懒加载的图片是否进入可视区域,如果图片在可视区内将图片的 src 属性设置为 data-src 的值，这样就可以实现延迟加载。</li>
</ul>
<p>预加载</p>
<ul>
<li>提前加载需要的资源，比如浏览第一页内容时，提前加载第二页的页面资源</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
        <category>web性能优化</category>
      </categories>
  </entry>
</search>
